<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>「千载弦歌，芳华如梦」 - sczyh30&#39;s blog</title>
  <subtitle>踏歌长行，梦想永在。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sczyh30.com/"/>
  <updated>2016-04-08T05:55:02.192Z</updated>
  <id>http://www.sczyh30.com/</id>
  
  <author>
    <name>sczyh30</name>
    <email>sczyh16@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>探索万恶的Slick 3 类型系统 | Prologue</title>
    <link href="http://www.sczyh30.com/posts/Scala/slick-3-type-system-query-prolouge/"/>
    <id>http://www.sczyh30.com/posts/Scala/slick-3-type-system-query-prolouge/</id>
    <published>2016-04-06T16:00:00.000Z</published>
    <updated>2016-04-08T05:55:02.192Z</updated>
    
    <content type="html">&lt;p&gt;这两天在给Samsara Aquarius的各个Service写分页的时候，设计了一个抽象层，想把一些公共的分页逻辑放在这个trait中，但是被Slick的类型系统折磨了一点时间。。今天粗略看了一下相关的源码，结合这几天遇到的问题，总结一下。因此就把这篇文章作为Prologue吧。。。（Slick的版本为3.1.1）&lt;/p&gt;
&lt;h1 id=&quot;蛋疼的类型参数&quot;&gt;蛋疼的类型参数&lt;/h1&gt;&lt;p&gt;在Slick里面，分页可以通过&lt;code&gt;drop&lt;/code&gt;和&lt;code&gt;take&lt;/code&gt;函数实现。&lt;code&gt;query.drop(offset).take(n)&lt;/code&gt;对应的SQL为&lt;code&gt;LIMIT n, offset&lt;/code&gt;。因此在一开始，我设计了一个trait作为分页逻辑的抽象：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PageDao&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;page&lt;/span&gt;(&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchWithPage&lt;/span&gt;(&lt;/span&gt;offset: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[_]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，&lt;code&gt;page&lt;/code&gt;函数用于获取总页数，&lt;code&gt;fetchWithPage&lt;/code&gt;函数实现分页查询逻辑。&lt;/p&gt;
&lt;p&gt;在Slick里，db操作通过&lt;code&gt;db.run(DBIOAction)&lt;/code&gt;进行，而每个&lt;code&gt;Query&lt;/code&gt;可以通过&lt;code&gt;result&lt;/code&gt;函数隐式转换成&lt;code&gt;DBIOAction&lt;/code&gt;，因此我们需要给参数中加上Query，以便我们的Service层可以传递不同的Query：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PageDao&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;page&lt;/span&gt;(&lt;/span&gt;query: slick.lifted.&lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, _, &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchWithPage&lt;/span&gt;(&lt;/span&gt;query: slick.lifted.&lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, _, &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;], offset: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[_]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Query[+E, U, C[_]]&lt;/code&gt;是一个接受3个类型参数的type constructor，这为后边的蛋疼埋下伏笔。。&lt;/p&gt;
&lt;p&gt;好了，接下来，由于我们需要在抽象层进行db操作，因此必须获取db对象，这里我选择继承&lt;code&gt;HasDatabaseConfigProvider[JdbcProfile]&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WithPageProvider&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HasDatabaseConfigProvider&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;JdbcProfile&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;PageDao&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; driver.api._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;withQueryByPage&lt;/span&gt; =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (query: slick.lifted.&lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, _, _], offset: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      query.drop(offset).take(&lt;span class=&quot;type&quot;&gt;LIMIT_PAGE&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;page&lt;/span&gt;(&lt;/span&gt;query: slick.lifted.&lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, _, _]): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.run(query.length.result) map &amp;#123; all =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;p&lt;/span&gt; =&lt;/span&gt; all % &lt;span class=&quot;type&quot;&gt;LIMIT_PAGE&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (p) all / &lt;span class=&quot;type&quot;&gt;LIMIT_PAGE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (all / &lt;span class=&quot;type&quot;&gt;LIMIT_PAGE&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; recover &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ex: &lt;span class=&quot;type&quot;&gt;Exception&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchWithPage&lt;/span&gt;(&lt;/span&gt;query: slick.lifted.&lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, _, _], offset: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[_]] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.run(withQueryByPage(query, offset).result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;嗯。。逻辑很快写好了，一切似乎都是OK的，下面在业务层中调用一下：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchWithPage&lt;/span&gt;(&lt;/span&gt;offset: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[(&lt;span class=&quot;type&quot;&gt;Category&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)]] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.fetchWithPage(categoriesCompiled, offset)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很快，远方就传来了IDE提示GG的声音。。。提示：&lt;code&gt;Expression of type Future[Seq[_]] doesn&amp;#39;t conform to expected type Future[Seq[(Category, Int)]]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;嗯。。。看来是必须具化Seq的type parameter了。。那么就给trait里的&lt;code&gt;fetchWithPage&lt;/code&gt;加个type parameter吧。。下面就陷入了苦逼的Slick类型系统初探过程——Slick在&lt;code&gt;run&lt;/code&gt;、&lt;code&gt;result&lt;/code&gt;的过程中，如何从一个原始的&lt;code&gt;Query[+E, U, C[_]]&lt;/code&gt;转化为最终的&lt;code&gt;Future[Seq[R]]&lt;/code&gt;？也就是说Query的这几个type parameters该取什么类型？想解决这个问题，只能看Slick的源码了。。首先从&lt;code&gt;run&lt;/code&gt;函数出发，看看Future是怎么产生的：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Run an Action asynchronously and return the result as a Future. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;](a: &lt;span class=&quot;type&quot;&gt;DBIOAction&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Nothing&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;] = runInternal(a, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，最后返回Future的类型参数是&lt;code&gt;DBIOAction[R, NoStream, Nothing]&lt;/code&gt;的第一个类型参数R。接着我们看一下&lt;code&gt;DBIOAction&lt;/code&gt;的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DBIOAction&lt;/span&gt;[&lt;/span&gt;+&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, +&lt;span class=&quot;type&quot;&gt;S&lt;/span&gt; &amp;lt;: &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;, -&lt;span class=&quot;type&quot;&gt;E&lt;/span&gt; &amp;lt;: &lt;span class=&quot;type&quot;&gt;Effect&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Dumpable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;嗯，看到这里，似乎明白了什么。。然后再看一下&lt;code&gt;Query&lt;/code&gt;的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QueryBase&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Rep&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Query&lt;/span&gt;[&lt;/span&gt;+&lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;QueryBase&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到&lt;code&gt;Query[+E, U, C[_]]&lt;/code&gt;继承了&lt;code&gt;QueryBase[C[U]]&lt;/code&gt;，然而注释里完全没有这三个type parameters的含义，所以就瞎猜。。注释里提到计算结果代表一个集合类型，如&lt;code&gt;Rep[Seq[T]]&lt;/code&gt;，而&lt;code&gt;QueryBase[T]&lt;/code&gt;又继承了&lt;code&gt;Rep[T]&lt;/code&gt;，所以很容易想到&lt;code&gt;Query&lt;/code&gt;第三个类型参数为&lt;code&gt;Seq&lt;/code&gt;。然而一开始没有看到后边的&lt;code&gt;[C[U]]&lt;/code&gt;，又因为DBIOAction中返回类型为第一个类型参数R，因此就错误地把这里的返回类型想成了第一个类型参数E（还是协变的，很迷惑人）。于是把&lt;code&gt;fetchWithPage&lt;/code&gt;改成了这样：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchWithPage&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;](query: slick.lifted.&lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, _, &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;], offset: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;仍然在报错，这次成了&lt;code&gt;Expression of type Future[Seq[Any]] doesn&amp;#39;t conform to expected type Future[Seq[R]]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这时候提示就比较明显了，既然第一个类型参数已经限定为&lt;code&gt;R&lt;/code&gt;，而返回值还为&lt;code&gt;Future[Seq[Any]]&lt;/code&gt;，那么很容易就会联想到当前为&lt;code&gt;_&lt;/code&gt;的类型参数有猫腻，即&lt;code&gt;Query[+E, U, C[_]]&lt;/code&gt;中的&lt;code&gt;U&lt;/code&gt;。这时候再看到后边继承的&lt;code&gt;QueryBase[C[U]]&lt;/code&gt;，一切都一目了然了。这里的&lt;code&gt;QueryBase[C[U]]&lt;/code&gt;是一个higher-kinded type，既然我们将&lt;code&gt;C&lt;/code&gt;设为&lt;code&gt;Seq&lt;/code&gt;，那么很容易想到&lt;code&gt;C[U]&lt;/code&gt;其实就是对应着&lt;code&gt;Seq[Result]&lt;/code&gt;，那么我们的R参数应该放在&lt;code&gt;Query&lt;/code&gt;的第二个类型参数U上。改一下发现，一切都正常了：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchWithPage&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;](query: slick.lifted.&lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;], offset: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;]] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.run(withQueryByPage(query, offset).result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;寻根溯源&quot;&gt;寻根溯源&lt;/h1&gt;&lt;p&gt;问题解决了，但&lt;code&gt;Query[+E, U, C[_]]&lt;/code&gt;里那个&lt;code&gt;+E&lt;/code&gt;实在是很迷惑人，于是就继续探究了探究它到底是什么玩意。注释里没写，那就从&lt;code&gt;Query&lt;/code&gt;的实现中找吧。。在&lt;code&gt;TableQuery&lt;/code&gt;的定义中有：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TableQuery&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;E&lt;/span&gt; &amp;lt;: &lt;span class=&quot;type&quot;&gt;AbstractTable&lt;/span&gt;[_]](cons: &lt;span class=&quot;type&quot;&gt;Tag&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;#&lt;span class=&quot;type&quot;&gt;TableElementType&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** The driver-independent superclass of all table row objects.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @tparam T Row type for this table.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractTable&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tableTag&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Tag&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;schemaName&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tableName&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Rep&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TableElementType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;E需要是&lt;code&gt;AbstractTable[_]&lt;/code&gt;的子类，因此基本上可以确定E与表的操作有关。。&lt;/p&gt;
&lt;p&gt;另外一个值的探究的地方就是那个&lt;code&gt;result&lt;/code&gt;函数是如何将一个&lt;code&gt;Query&lt;/code&gt;转化为&lt;code&gt;DBIOAction&lt;/code&gt;的。蛋疼的地方在于这个转换是隐式的（相当于实现了Typeclass Pattern），因此追踪如何转换的比较困难。好在写代码的时候发现，如果不导入&lt;code&gt;driver.api._&lt;/code&gt;的话，就会找不到&lt;code&gt;result&lt;/code&gt;函数，因此可以从这里入手。跳转到&lt;code&gt;api&lt;/code&gt;的源码：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;api&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;API&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;API&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么秘密应该就藏在&lt;code&gt;JdbcProfile#API&lt;/code&gt;类里了：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LowPriorityAPI&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImplicitColumnTypes&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FastPath&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;JdbcFastPath&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SimpleDBIO&lt;/span&gt;[&lt;/span&gt;+&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;SimpleJdbcAction&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SimpleDBIO&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SimpleJdbcAction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jdbcFastPathExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;P&lt;/span&gt;](mp: &lt;span class=&quot;type&quot;&gt;MappedProjection&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;P&lt;/span&gt;]) = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;JdbcFastPathExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;P&lt;/span&gt;](mp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;queryDeleteActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[_]](q: &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_ &amp;lt;: &lt;span class=&quot;type&quot;&gt;RelationalProfile&lt;/span&gt;#&lt;span class=&quot;type&quot;&gt;Table&lt;/span&gt;[_], _, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;DeleteActionExtensionMethods&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createDeleteActionExtensionMethods(deleteCompiler.run(q.toNode).tree, ())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runnableCompiledDeleteActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[_]](c: &lt;span class=&quot;type&quot;&gt;RunnableCompiled&lt;/span&gt;[_ &amp;lt;: &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, _, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;], &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;]]): &lt;span class=&quot;type&quot;&gt;DeleteActionExtensionMethods&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createDeleteActionExtensionMethods(c.compiledDelete, c.param)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runnableCompiledUpdateActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[_]](c: &lt;span class=&quot;type&quot;&gt;RunnableCompiled&lt;/span&gt;[_ &amp;lt;: &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, _, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;], &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;]]): &lt;span class=&quot;type&quot;&gt;UpdateActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createUpdateActionExtensionMethods(c.compiledUpdate, c.param)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jdbcActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;E&lt;/span&gt; &amp;lt;: &lt;span class=&quot;type&quot;&gt;Effect&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;S&lt;/span&gt; &amp;lt;: &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;](a: &lt;span class=&quot;type&quot;&gt;DBIOAction&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;S&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;JdbcActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;S&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;JdbcActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;S&lt;/span&gt;](a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;actionBasedSQLInterpolation&lt;/span&gt;(&lt;/span&gt;s: &lt;span class=&quot;type&quot;&gt;StringContext&lt;/span&gt;) = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ActionBasedSQLInterpolation&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里面存在这样的继承关系（简化过后的）：&lt;code&gt;JdbcProfile#API &amp;lt;:&amp;lt; RelationalProfile#API &amp;lt;:&amp;lt; BasicProfile#API&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再看RelationalProfile中的API类：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImplicitColumnTypes&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Table&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] = driver.&lt;span class=&quot;type&quot;&gt;Table&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sequence&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] = driver.&lt;span class=&quot;type&quot;&gt;Sequence&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sequence&lt;/span&gt; =&lt;/span&gt; driver.&lt;span class=&quot;type&quot;&gt;Sequence&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ColumnType&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] = driver.&lt;span class=&quot;type&quot;&gt;ColumnType&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseColumnType&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] = driver.&lt;span class=&quot;type&quot;&gt;BaseColumnType&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MappedColumnType&lt;/span&gt; =&lt;/span&gt; driver.&lt;span class=&quot;type&quot;&gt;MappedColumnType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;annotation&quot;&gt;@deprecated&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Use an explicit conversion to an Option column with `.?`&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;3.0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;columnToOptionColumn&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;BaseTypedType&lt;/span&gt;](c: &lt;span class=&quot;type&quot;&gt;Rep&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;Rep&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]] = c.?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;valueToConstColumn&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;TypedType&lt;/span&gt;](v: &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;) = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LiteralColumn&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;columnToOrdered&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;TypedType&lt;/span&gt;](c: &lt;span class=&quot;type&quot;&gt;Rep&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;ColumnOrdered&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;ColumnOrdered&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](c, &lt;span class=&quot;type&quot;&gt;Ordering&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tableQueryToTableQueryExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; &amp;lt;: &lt;span class=&quot;type&quot;&gt;RelationalProfile&lt;/span&gt;#&lt;span class=&quot;type&quot;&gt;Table&lt;/span&gt;[_], &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;](q: &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TableQuery&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TableQueryExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;](q)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;streamableCompiledInsertActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;](c: &lt;span class=&quot;type&quot;&gt;StreamableCompiled&lt;/span&gt;[_, _, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;InsertActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;] = createInsertActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;](c.compiledInsert.asInstanceOf[&lt;span class=&quot;type&quot;&gt;CompiledInsert&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;queryInsertActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[_]](q: &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;]) = createInsertActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;](compileInsert(q.toNode))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;schemaActionExtensionMethods&lt;/span&gt;(&lt;/span&gt;sd: &lt;span class=&quot;type&quot;&gt;SchemaDescription&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;SchemaActionExtensionMethods&lt;/span&gt; = createSchemaActionExtensionMethods(sd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看BasicProfile中的API类：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Aliases&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExtensionMethodConversions&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Database&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Backend&lt;/span&gt;#&lt;span class=&quot;type&quot;&gt;Database&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Database&lt;/span&gt; =&lt;/span&gt; backend.&lt;span class=&quot;type&quot;&gt;Database&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Session&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Backend&lt;/span&gt;#&lt;span class=&quot;type&quot;&gt;Session&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SlickException&lt;/span&gt; =&lt;/span&gt; slick.&lt;span class=&quot;type&quot;&gt;SlickException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;slickDriver&lt;/span&gt;:&lt;/span&gt; driver.&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; = driver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Work-around for SI-3346&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;annotation&quot;&gt;@inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;anyToToShapedValue&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](value: &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;) = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ToShapedValue&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repQueryActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;](rep: &lt;span class=&quot;type&quot;&gt;Rep&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;QueryActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createQueryActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;](queryCompiler.run(rep.toNode).tree, ())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;streamableQueryActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[_]](q: &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[_,&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;StreamingQueryActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;], &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createStreamingQueryActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;], &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;](queryCompiler.run(q.toNode).tree, ())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runnableCompiledQueryActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;](c: &lt;span class=&quot;type&quot;&gt;RunnableCompiled&lt;/span&gt;[_, &lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;QueryActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createQueryActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;](c.compiledQuery, c.param)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;streamableCompiledQueryActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;](c: &lt;span class=&quot;type&quot;&gt;StreamableCompiled&lt;/span&gt;[_, &lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;StreamingQueryActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createStreamingQueryActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;](c.compiledQuery, c.param)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Applying a CompiledFunction always results in only a RunnableCompiled, not a StreamableCompiled, so we need this:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;streamableAppliedCompiledFunctionActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;[_]](c: &lt;span class=&quot;type&quot;&gt;AppliedCompiledFunction&lt;/span&gt;[_, &lt;span class=&quot;type&quot;&gt;Query&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;], &lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;StreamingQueryActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createStreamingQueryActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;RU&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;EU&lt;/span&gt;](c.compiledQuery, c.param)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// This only works on Scala 2.11 due to SI-3346:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;recordQueryActionExtensionMethods&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;M&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;](q: &lt;span class=&quot;type&quot;&gt;M&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; shape: &lt;span class=&quot;type&quot;&gt;Shape&lt;/span&gt;[_ &amp;lt;: &lt;span class=&quot;type&quot;&gt;FlatShapeLevel&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;M&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, _]): &lt;span class=&quot;type&quot;&gt;QueryActionExtensionMethods&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createQueryActionExtensionMethods[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;](queryCompiler.run(shape.toNode(q)).tree, ())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此多的implicit转换，可以将Query和CompiledQuery转换成各种QueryActionExtensionMethods。那么我们再来看&lt;code&gt;result&lt;/code&gt;的源码，看看它是不是在某个QueryActionExtensionMethods类里：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StreamingQueryActionExtensionMethodsImpl&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](tree: &lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt;, param: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;QueryActionExtensionMethodsImpl&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Streaming&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]](tree, param) &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;StreamingQueryActionExtensionMethodsImpl&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;result&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;StreamingDriverAction&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Effect&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Read&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.result.asInstanceOf[&lt;span class=&quot;type&quot;&gt;StreamingDriverAction&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Effect&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Read&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;果然！&lt;code&gt;result&lt;/code&gt;方法存在于这个QueryActionExtensionMethods类里，而且Query可以通过上述API隐式转换为QueryActionExtensionMethods。这个类好混乱，继承了两个trait，还没注释（这一点最蛋疼了，直接看源码估计无解）。再往它的父类找：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QueryActionExtensionMethodsImpl&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;S&lt;/span&gt; &amp;lt;: &lt;span class=&quot;type&quot;&gt;NoStream&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** An Action that runs this query. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;result&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DriverAction&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;S&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Effect&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Read&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StreamingQueryActionExtensionMethodsImpl&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;QueryActionExtensionMethodsImpl&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Streaming&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;result&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;StreamingDriverAction&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Effect&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Read&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它们是最基本的&lt;code&gt;QueryActionExtensionMethods&lt;/code&gt;，即查询操作。&lt;/p&gt;
&lt;p&gt;到此为止，我们终于搞明白了一个数据库查询过程中从&lt;code&gt;Query&lt;/code&gt;经过implicit的&lt;code&gt;result&lt;/code&gt;转换成&lt;code&gt;DBIOAction&lt;/code&gt;，再进行&lt;code&gt;db.run&lt;/code&gt;得到Future异步结果的类型转换的过程。我做了一张图来总结这个过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/slick-db-type-convert-query-sczyh30-fixed.png&quot; alt=&quot;Slick Query Type Process&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在给Samsara Aquarius的各个Service写分页的时候，设计了一个抽象层，想把一些公共的分页逻辑放在这个trait中，但是被Slick的类型系统折磨了一点时间。。今天粗略看了一下相关的源码，结合这几天遇到的问题，总结一下。因此就把这篇文章作为Prolog
    
    </summary>
    
      <category term="Scala" scheme="http://www.sczyh30.com/categories/Scala/"/>
    
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/tags/Functional-Programming/"/>
    
      <category term="Scala" scheme="http://www.sczyh30.com/tags/Scala/"/>
    
      <category term="Slick" scheme="http://www.sczyh30.com/tags/Slick/"/>
    
  </entry>
  
  <entry>
    <title>Play Framework 2.5 | Dependency Injection总结</title>
    <link href="http://www.sczyh30.com/posts/Scala/play-framework-2-5-dependency-injection-di/"/>
    <id>http://www.sczyh30.com/posts/Scala/play-framework-2-5-dependency-injection-di/</id>
    <published>2016-03-28T16:00:00.000Z</published>
    <updated>2016-04-07T12:30:40.048Z</updated>
    
    <content type="html">&lt;p&gt;最近在将Samsara Aquarius从Play 2.4.6迁移至Play 2.5.0的时候发现，Play 2.5将一些全局对象deprcated了，并强烈建议全面使用依赖注入来代替全局对象，所以就把Aquarius的代码用DI重构了一下。其实从Play 2.4.0开始就引入了依赖注入了(基于&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=330&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSR 330&lt;/a&gt;标准)，只不过还没有很好地推广。这里就来总结一下Play Framework中DI的使用。（本来开发的时候想保持FP风格的，无奈DI更多的是偏OO的风格。。FP与OO杂糅不好把握呀。。）&lt;/p&gt;
&lt;h1 id=&quot;为何需要引入依赖注入&quot;&gt;为何需要引入依赖注入&lt;/h1&gt;&lt;p&gt;依赖注入(Dependency Injection)在OOP中早已是一个耳熟能详的原则了，其中Spring里用DI都用烂了。简单来说，依赖注入使得我们不需要自己创建对象，而是由容器来帮我们创建。每个组件之间不再是直接相互依赖，而是通过容器进行注入，这降低了组件之间的耦合度。这个容器就像是一个全局的大工厂，专门“生产”对象，而我们只需要进行配置（常见的通过XML文件或通过注解）。&lt;/p&gt;
&lt;p&gt;在Play API中有一个Global对象，保存着一些全局的可变状态。另外还有一个Application对象相当于当前正在运行的Play实例。这两个伴生对象经常会在测试和部署的时候引发问题，并且也会影响Play实例的生命周期以及插件系统的工作。因此从Play 2.4开始，开发者对底层的结构做了很大的调整，底层所有的组件（包括Application、Route、Controller）都通过依赖注入进行管理，而不再使用Global和Application对象。后面版本中这两个对象只是从DI中获取实例的引用。从Play 2.5开始，这些全局对象被Deprecated。&lt;/p&gt;
&lt;p&gt;Play内部的DI组件都用的是 &lt;strong&gt;Google Guice&lt;/strong&gt;。只要是符合JSR-330标准的DI组件都可用于Play Framework中。&lt;/p&gt;
&lt;h1 id=&quot;DI_in_Play_Framework&quot;&gt;DI in Play Framework&lt;/h1&gt;&lt;h2 id=&quot;如何使用&quot;&gt;如何使用&lt;/h2&gt;&lt;p&gt;比如我们的B组件需要A组件的实例作为依赖，那么我们可以这么定义：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; javax.inject.&lt;span class=&quot;type&quot;&gt;Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;@Inject&lt;/span&gt;(&lt;/span&gt;) (a: &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，&lt;code&gt;@Inject()&lt;/code&gt;需要插入在类名之后，构造参数列表之前，后边跟上需要注入的对象列表。&lt;/p&gt;
&lt;p&gt;依赖注入有&lt;a href=&quot;https://github.com/google/guice/wiki/Injections&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;好几种方式&lt;/a&gt;：&lt;strong&gt;构造注入&lt;/strong&gt;、&lt;strong&gt;方法注入&lt;/strong&gt; 等等。这里采用最常用的构造注入。&lt;/p&gt;
&lt;h2 id=&quot;生命周期及范围&quot;&gt;生命周期及范围&lt;/h2&gt;&lt;p&gt;依赖注入系统管理着各个注入组件的生命周期和范围。有以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次从Injector里取出的都是新的对象，即每次需要此组件的时候都会创建新的实例，用Spring IoC的话来说就是Bean的范围是 &lt;strong&gt;Prototype&lt;/strong&gt; 。这一点和Spring不同(Spring默认是Singleton)。当然可以通过给待注入的类加上&lt;code&gt;@Singleton&lt;/code&gt;注解来实现 &lt;strong&gt;Singleton&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;遵循懒加载原则，即不用的时候就不创建。如果需要提前创建实例的话可以使用 &lt;strong&gt;Eager Binding&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ApplicationLifecycle&quot;&gt;ApplicationLifecycle&lt;/h2&gt;&lt;p&gt;有些组件需要在Play结束运行的时候进行一些清理工作，如关闭连接、关闭句柄。Play提供了&lt;code&gt;ApplicationLifecycle&lt;/code&gt;类，可以通过&lt;code&gt;addStopHook&lt;/code&gt;函数给组件注册回调，在Play结束运行的时候进行清理工作。&lt;code&gt;addStopHook&lt;/code&gt;函数有两个版本，常用的是第一个：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addStopHook&lt;/span&gt;(&lt;/span&gt;hook: () =&amp;gt; &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[_]): &lt;span class=&quot;type&quot;&gt;Unit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addStopHook&lt;/span&gt;(&lt;/span&gt;hook: &lt;span class=&quot;type&quot;&gt;Callable&lt;/span&gt;[_ &amp;lt;: &lt;span class=&quot;type&quot;&gt;CompletionStage&lt;/span&gt;[_]]): &lt;span class=&quot;type&quot;&gt;Unit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;底层实现嘛比较直观，默认的实现是&lt;code&gt;DefaultApplicationLifecycle&lt;/code&gt;类：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Default implementation of the application lifecycle.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultApplicationLifecycle&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicationLifecycle&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mutex&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;annotation&quot;&gt;@volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hooks = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;.empty[() =&amp;gt; &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[_]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addStopHook&lt;/span&gt;(&lt;/span&gt;hook: () =&amp;gt; &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[_]) = mutex.synchronized &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hooks = hook :: hooks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stop&lt;/span&gt;(&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[_] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do we care if one hook executes on another hooks redeeming thread? Hopefully not.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; play.api.libs.iteratee.&lt;span class=&quot;type&quot;&gt;Execution&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Implicits&lt;/span&gt;.trampoline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hooks.foldLeft(&lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;.successful[&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;](())) &amp;#123; (future, hook) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      future.flatMap &amp;#123; _ =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hook().recover &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; e =&amp;gt; &lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&quot;Error executing stop hook&quot;&lt;/span&gt;, e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DefaultApplicationLifecycle&lt;/code&gt;类里维护了一个钩子列表hook用于存储所有注册的回调函数，类型为&lt;code&gt;List[() =&amp;gt; Future[_]]&lt;/code&gt;。由于&lt;code&gt;DefaultApplicationLifecycle&lt;/code&gt;组件为单例，因此为避免资源争用，将hook变量声明为&lt;code&gt;@volatile&lt;/code&gt;，并且注册回调函数时需要加锁。注意回调函数是按注册的顺序进行存储的。在应用结束时，会调用&lt;code&gt;stop&lt;/code&gt;函数，通过&lt;code&gt;foldl&lt;/code&gt;依次调用各个回调函数。&lt;/p&gt;
&lt;h2 id=&quot;重构例子&quot;&gt;重构例子&lt;/h2&gt;&lt;p&gt;之前我把部分的Service设计成了Object（脑残了），并且在获取Slick的&lt;code&gt;DatabaseConfig&lt;/code&gt;的时候使用了全局变量&lt;code&gt;play.api.Play.current&lt;/code&gt;。这里我们来重构一下。&lt;/p&gt;
&lt;p&gt;首先把Service重构为单例的类，并且通过DI的方式获取&lt;code&gt;db&lt;/code&gt;。可以继承&lt;code&gt;HasDatabaseConfigProvider[JdbcProfile]&lt;/code&gt;接口并注入&lt;code&gt;DatabaseConfigProvider&lt;/code&gt;，这样Service就可以直接使用&lt;code&gt;HasDatabaseConfigProvider&lt;/code&gt;的&lt;code&gt;db&lt;/code&gt;对象了。当然如果不想继承&lt;code&gt;HasDatabaseConfigProvider&lt;/code&gt;接口的话也可以仅注入&lt;code&gt;DatabaseConfigProvider&lt;/code&gt;并自己在类中获取&lt;code&gt;dbConfig&lt;/code&gt;和&lt;code&gt;db&lt;/code&gt;(其它方式见Play-Slcik的文档)。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;@Inject&lt;/span&gt;(&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dbConfigProvider&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DatabaseConfigProvider&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;HasDatabaseConfigProvider&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;JdbcProfile&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; driver.api._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;users&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TableQuery&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;UserTable&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;/span&gt;user: &lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.run(users += user) recover &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; duplicate: com.mysql.jdbc.exceptions.&lt;span class=&quot;type&quot;&gt;MySQLIntegrityConstraintViolationException&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;DB_ADD_DUPLICATE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; _: &lt;span class=&quot;type&quot;&gt;Exception&lt;/span&gt; =&amp;gt; -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 其他代码略......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来就是在Controller里配置DI将Service注入至Controller中。以UserController为例：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;@Inject&lt;/span&gt;(&lt;/span&gt;) (service: &lt;span class=&quot;type&quot;&gt;UserService&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Controller&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loginIndex&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Action&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; request =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    request.session.get(&lt;span class=&quot;string&quot;&gt;&quot;aq_token&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;(user) =&amp;gt; &lt;span class=&quot;type&quot;&gt;Redirect&lt;/span&gt;(routes.&lt;span class=&quot;type&quot;&gt;Application&lt;/span&gt;.index())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;None&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Ok&lt;/span&gt;(views.html.login(&lt;span class=&quot;type&quot;&gt;LoginForm&lt;/span&gt;.form))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;comment&quot;&gt;// 其他代码略......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;DI底层调用过程&quot;&gt;DI底层调用过程&lt;/h2&gt;&lt;p&gt;Play API中所有的DI都用的 &lt;strong&gt;Google Guice&lt;/strong&gt;。它们最后都是调用了&lt;code&gt;GuiceInjector&lt;/code&gt;类的&lt;code&gt;instanceOf&lt;/code&gt;函数：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Play Injector backed by a Guice Injector.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GuiceInjector&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;@Inject&lt;/span&gt;(&lt;/span&gt;) (injector: com.google.inject.&lt;span class=&quot;type&quot;&gt;Injector&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;PlayInjector&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Get an instance of the given class from the injector.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceOf&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; ct: &lt;span class=&quot;type&quot;&gt;ClassTag&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]) = instanceOf(ct.runtimeClass.asInstanceOf[&lt;span class=&quot;type&quot;&gt;Class&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Get an instance of the given class from the injector.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceOf&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](clazz: &lt;span class=&quot;type&quot;&gt;Class&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]) = injector.getInstance(clazz)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * Get an instance bound to the given binding key.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceOf&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](key: &lt;span class=&quot;type&quot;&gt;BindingKey&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]) = injector.getInstance(&lt;span class=&quot;type&quot;&gt;GuiceKey&lt;/span&gt;(key))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再往底层调用&lt;code&gt;com.google.inject.internal#getProvider&lt;/code&gt;方法获取Provider，最终都会调用到某个种类的Injector的&lt;code&gt;inject&lt;/code&gt;、&lt;code&gt;provision&lt;/code&gt;、&lt;code&gt;construct&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/play-scala-injector-dbg-01.png&quot; alt=&quot;Call Stack&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;题外话-函数式编程中的DI&quot;&gt;题外话-函数式编程中的DI&lt;/h1&gt;&lt;p&gt;以前用DI的时候一直在想，这玩意在OOP中用途这么广泛，那么在FP里会是什么光景呢？其实在FP里，&lt;strong&gt;Currying&lt;/strong&gt; 就可以当做是OOP中的DI。这里先挖个坑，待填坑:)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在将Samsara Aquarius从Play 2.4.6迁移至Play 2.5.0的时候发现，Play 2.5将一些全局对象deprcated了，并强烈建议全面使用依赖注入来代替全局对象，所以就把Aquarius的代码用DI重构了一下。其实从Play 2.4.0开始就
    
    </summary>
    
      <category term="Scala" scheme="http://www.sczyh30.com/categories/Scala/"/>
    
    
      <category term="DI" scheme="http://www.sczyh30.com/tags/DI/"/>
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/tags/Functional-Programming/"/>
    
      <category term="Play Framework" scheme="http://www.sczyh30.com/tags/Play-Framework/"/>
    
      <category term="Scala" scheme="http://www.sczyh30.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>FP :: Type Theory | Type, Type Constructor 与 Kind</title>
    <link href="http://www.sczyh30.com/posts/Functional-Programming/functional-programming-type-and-kind/"/>
    <id>http://www.sczyh30.com/posts/Functional-Programming/functional-programming-type-and-kind/</id>
    <published>2016-03-15T16:00:00.000Z</published>
    <updated>2016-04-07T12:26:21.766Z</updated>
    
    <content type="html">&lt;p&gt;以前忘了总结了。。正好在这里总结一下 &lt;strong&gt;Type&lt;/strong&gt;, &lt;strong&gt;Type Constructor&lt;/strong&gt; 与 &lt;strong&gt;Kind&lt;/strong&gt; 这几个概念，结合Haskell和Scala。&lt;/p&gt;
&lt;h1 id=&quot;Type,_Type_Constructor_与_Kind_(Haskell)&quot;&gt;Type, Type Constructor 与 Kind (Haskell)&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Types and Programming Languages&lt;/em&gt; 里的一张图非常直观地表现了Kind与Type的意义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/tapl-type-kind.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中，上图的Term就是值(Value)的意思，比如&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;&amp;quot;haha&amp;quot;&lt;/code&gt;之类的，都是Term。&lt;/p&gt;
&lt;p&gt;而Type，则是 &lt;strong&gt;Value的类型&lt;/strong&gt;，比如&lt;code&gt;1&lt;/code&gt;的Type是&lt;code&gt;Num&lt;/code&gt;(Haskell)，&lt;code&gt;&amp;quot;haha&amp;quot;&lt;/code&gt;的Type是&lt;code&gt;String&lt;/code&gt;。然后我们引入Type Constructor的概念，它接受一个或多个类型参数(type parameter)并构造出一个新Type，比如&lt;code&gt;Maybe&lt;/code&gt;是一个Unary Type Constructor，它接受一个类型参数，可以构造出&lt;code&gt;Maybe Int&lt;/code&gt;和&lt;code&gt;Maybe String&lt;/code&gt;等等的不同的Type。再比如&lt;code&gt;Either&lt;/code&gt;的定义为&lt;code&gt;data Either a b = Left a | Right b&lt;/code&gt;，它接受两个类型参数，可以构造出像&lt;code&gt;Either Bool&lt;/code&gt;和&lt;code&gt;Either Int Bool&lt;/code&gt;这样的Type Constructor。其实，我们也可以把这些Primitive Type看作是一种特殊的Type Constructor，即接受零个类型参数(Nullary Type Constructor)。&lt;/p&gt;
&lt;p&gt;有了Type和Type Constructor的概念以后，我们就可以定义Kind了。Kind表示 &lt;strong&gt;Type Constructor的类型&lt;/strong&gt; ，在Haskell中有以下定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nullary Type Constructor（即普通的Type）的kind为&lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果k1和k2是kind，那么&lt;code&gt;k1 -&amp;gt; k2&lt;/code&gt;代表一个Type constructor的kind，这个Constructor接受kind为k1的类型参数，返回kind为k2的类型参数。&lt;br&gt;比如&lt;code&gt;Either String&lt;/code&gt;的kind为&lt;code&gt;* -&amp;gt; *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样，从Value到Type、Type Constructor，再到Kind，每上一个层次都是一个抽象。Type Constructor是Value的类型，Kind又是Type Constructor的类型。&lt;/p&gt;
&lt;h1 id=&quot;Kind_Polymorphism_(Haskell)&quot;&gt;Kind Polymorphism (Haskell)&lt;/h1&gt;&lt;p&gt;默认情况下，Haskell不允许kind具有多态性(Kind polymorphism)。比如我们的Either的定义如下:&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt; a b = &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt; a | &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt; b 	&lt;span class=&quot;comment&quot;&gt;-- Defined in ‘Data.Either’&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;a和b的kind是任意的，可以是&lt;code&gt;*&lt;/code&gt;，也可以是&lt;code&gt;* -&amp;gt; *&lt;/code&gt;。Haskell默认将它们的kind都推导为&lt;code&gt;*&lt;/code&gt;，因此下面的定义是不允许的：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;T1&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt; []&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;interactive&amp;gt;:&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Expecting&lt;/span&gt; one more argument to ‘[]’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Expected&lt;/span&gt; a &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;, but ‘[]’ has kind ‘* -&amp;gt; *’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;In&lt;/span&gt; the &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ‘[]’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;In&lt;/span&gt; the definition &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; constructor ‘&lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;In&lt;/span&gt; the &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; declaration for ‘&lt;span class=&quot;type&quot;&gt;T1&lt;/span&gt;’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然有些时候Haskell也是可以推导出来某些Higher-order kind的，比如：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; t k p = &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;&amp;#123; &lt;span class=&quot;title&quot;&gt;s1&lt;/span&gt; :: &lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;s2&lt;/span&gt; :: &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;k&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于&lt;code&gt;s2 :: t k&lt;/code&gt;，而k默认被推导为&lt;code&gt;*&lt;/code&gt;，因此t的kind就会被推导为&lt;code&gt;* -&amp;gt; *&lt;/code&gt;，那么A的kind最终被推导为&lt;code&gt;(* -&amp;gt; *) -&amp;gt; * -&amp;gt; * -&amp;gt; *&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果要使Haskell支持 &lt;strong&gt;polymorphic kinds&lt;/strong&gt; ，可以利用GHC的扩展&lt;code&gt;-XPolyKinds&lt;/code&gt;，就不再展开总结了，详情可以参考&lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/kind-polymorphism.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;Data_Kinds/Datatype_promotion_(Haskell)&quot;&gt;Data Kinds/Datatype promotion (Haskell)&lt;/h1&gt;&lt;p&gt;Datatype promotion是GHC的一个扩展(&lt;code&gt;-XDataKinds&lt;/code&gt;)，可以将部分的Datatype给自动promote成kind。比如：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :k &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt; :: k -&amp;gt; &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt; k k1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :k &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;GHC&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;TypeLits&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Nat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :k &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;GHC&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;TypeLits&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Symbol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :k &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; :: k -&amp;gt; &lt;span class=&quot;type&quot;&gt;Maybe&lt;/span&gt; k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体的应用还没实践过，等实践过再来总结。。&lt;/p&gt;
&lt;h1 id=&quot;Scala中的Type和Kind&quot;&gt;Scala中的Type和Kind&lt;/h1&gt;&lt;p&gt;Scala中的Type和Kind用一张图总结：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/scala-type-kind-higher.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我觉得Scala中的Kind比较混乱，至少每次试的时候出的结果总与想象的不对应，或许还没有理解吧。。。举几个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Functor&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;M&lt;/span&gt;[_]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;console&amp;gt;:&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;: error: not found: value &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;X&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(* -&amp;gt; *) -&amp;gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;takes&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;/span&gt;s): a higher-kinded &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala.collection.immutable.&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[+&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* -(+)-&amp;gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;:&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st-order-kinded &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala.collection.immutable.&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[+&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* -(+)-&amp;gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;:&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st-order-kinded &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala.collection.immutable.&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a proper &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala.util.&lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[+&lt;span class=&quot;type&quot;&gt;A1&lt;/span&gt;,+&lt;span class=&quot;type&quot;&gt;A2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* -(+)-&amp;gt; * -(+)-&amp;gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;:&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st-order-kinded &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[_]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala.&lt;span class=&quot;type&quot;&gt;Function2&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[-&lt;span class=&quot;type&quot;&gt;A1&lt;/span&gt;,-&lt;span class=&quot;type&quot;&gt;A2&lt;/span&gt;,+&lt;span class=&quot;type&quot;&gt;A3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* -(-)-&amp;gt; * -(-)-&amp;gt; * -(+)-&amp;gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;:&lt;/span&gt; a &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;st-order-kinded &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;感觉Scala REPL中的&lt;code&gt;:kind&lt;/code&gt;是针对value的而不是type的，非常蛋疼，估计是让JVM的泛型类型擦除搞得Parametric Polymorphism都不爽了。。另外Scala中也分 &lt;strong&gt;1st-order-kinded type&lt;/strong&gt; 和 &lt;strong&gt;higher-kinded type&lt;/strong&gt; 。所谓higher-kinded type就是类似于&lt;code&gt;A[B[_]]&lt;/code&gt;这样的type constructor，比如下面的这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T3&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;Q&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;], &lt;span class=&quot;type&quot;&gt;P&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;T3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;T3&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;X&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F1&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A1&lt;/span&gt;],&lt;span class=&quot;type&quot;&gt;F2&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A2&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(* -&amp;gt; *) -&amp;gt; (* -&amp;gt; *) -&amp;gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;takes&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;/span&gt;s): a higher-kinded &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T4&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;Tuple2&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;], &lt;span class=&quot;type&quot;&gt;P&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;C&lt;/span&gt;]], &lt;span class=&quot;type&quot;&gt;D&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;E&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k -v &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;T4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;T4&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;Y&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F1&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A1&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;A2&lt;/span&gt;],&lt;span class=&quot;type&quot;&gt;X&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F2&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A3&lt;/span&gt;]],&lt;span class=&quot;type&quot;&gt;A4&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;A5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(* -&amp;gt; * -&amp;gt; *) -&amp;gt; ((* -&amp;gt; *) -&amp;gt; *) -&amp;gt; * -&amp;gt; * -&amp;gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;This&lt;/span&gt; is a &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;takes&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;/span&gt;s): a higher-kinded &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;参考资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Types and Programming Languages&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Generics of a Higher Kind&lt;/em&gt;, Martin Odersky&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/Kind&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kind - HaskellWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6246719/what-is-a-higher-kinded-type-in-scala&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is a higher kinded type in Scala?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前忘了总结了。。正好在这里总结一下 &lt;strong&gt;Type&lt;/strong&gt;, &lt;strong&gt;Type Constructor&lt;/strong&gt; 与 &lt;strong&gt;Kind&lt;/strong&gt; 这几个概念，结合Haskell和Scala。&lt;/p&gt;
&lt;h1 id=&quot;Ty
    
    </summary>
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/categories/Functional-Programming/"/>
    
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/tags/Functional-Programming/"/>
    
      <category term="Haskell" scheme="http://www.sczyh30.com/tags/Haskell/"/>
    
      <category term="Scala" scheme="http://www.sczyh30.com/tags/Scala/"/>
    
      <category term="Type Theory" scheme="http://www.sczyh30.com/tags/Type-Theory/"/>
    
  </entry>
  
  <entry>
    <title>并发编程 | ThreadLocal源码深入分析</title>
    <link href="http://www.sczyh30.com/posts/Java/java-concurrent-threadlocal/"/>
    <id>http://www.sczyh30.com/posts/Java/java-concurrent-threadlocal/</id>
    <published>2016-03-04T16:00:00.000Z</published>
    <updated>2016-03-17T11:36:45.730Z</updated>
    
    <content type="html">&lt;p&gt;以前只知道ThreadLocal的大致思路，没有去深入研究。今天读了读源码，果然博大精深～&lt;/p&gt;
&lt;p&gt;ThreadLocal提供了线程本地变量，它可以保证访问到的变量属于当前线程，每个线程都保存有一个变量副本，每个线程的变量都不同，而同一个线程在任何时候访问这个本地变量的结果都是一致的。当此线程结束生命周期时，所有的线程本地实例都会被GC。ThreadLocal相当于提供了一种线程隔离，将变量与线程相绑定。ThreadLocal通常定义为&lt;code&gt;private static&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;假如让我们来实现一个变量与线程相绑定的功能，我们可以很容易地想到用&lt;code&gt;HashMap&lt;/code&gt;来实现，Thread作为&lt;code&gt;key&lt;/code&gt;，变量作为&lt;code&gt;value&lt;/code&gt;。事实上，JDK中确实使用了类似&lt;code&gt;Map&lt;/code&gt;的结构存储变量，但不是像我们想的那样。下面我们来探究OpenJDK 1.8中&lt;code&gt;ThreadLocal&lt;/code&gt;的实现。&lt;/p&gt;
&lt;h1 id=&quot;初探ThreadLocal&quot;&gt;初探ThreadLocal&lt;/h1&gt;&lt;p&gt;我们从ThreadLocal的几个成员变量入手：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threadLocalHashCode = nextHashCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The next hash code to be given out. Updated atomically. Starts at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * zero.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; AtomicInteger nextHashCode =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AtomicInteger();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The difference between successively generated hash codes - turns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * implicit sequential thread-local IDs into near-optimally spread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * multiplicative hash values for power-of-two-sized tables.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; HASH_INCREMENT = &lt;span class=&quot;number&quot;&gt;0x61c88647&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Returns the next hash code.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nextHashCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nextHashCode.getAndAdd(HASH_INCREMENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ThreadLocal通过&lt;code&gt;threadLocalHashCode&lt;/code&gt;来标识每一个ThreadLocal的唯一性。&lt;code&gt;threadLocalHashCode&lt;/code&gt;通过&lt;code&gt;CAS操作&lt;/code&gt;进行更新，每次hash操作的增量为&lt;strong&gt;0x61c88647&lt;/strong&gt;(这个数的原理没有探究)。&lt;br&gt;再看&lt;code&gt;set&lt;/code&gt;方法&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Sets the current thread&#39;s copy of this thread-local variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * to the specified value.  Most subclasses will have no need to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * override this method, relying solely on the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #initialValue&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * method to set the values of thread-locals.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; value the value to be stored in the current thread&#39;s copy of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *        this thread-local.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread t = Thread.currentThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ThreadLocalMap map = getMap(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map.set(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        createMap(t, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到通过&lt;code&gt;Thread.currentThread()&lt;/code&gt;方法获取了当前的线程引用，并传给了&lt;code&gt;getMap(Thread)&lt;/code&gt;方法获取一个&lt;code&gt;ThreadLocalMap&lt;/code&gt;的实例。我们继续跟进&lt;code&gt;getMap(Thread)&lt;/code&gt;方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;ThreadLocalMap &lt;span class=&quot;title&quot;&gt;getMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Thread t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t.threadLocals;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到&lt;code&gt;getMap(Thread)&lt;/code&gt;方法直接返回Thread实例的成员变量&lt;code&gt;threadLocals&lt;/code&gt;。它的定义在Thread内部，访问级别为package级别：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* ThreadLocal values pertaining to this thread. This map is maintained&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * by the ThreadLocal class. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ThreadLocal.ThreadLocalMap threadLocals = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到了这里，我们可以看出，每个&lt;code&gt;Thread&lt;/code&gt;里面都有一个&lt;code&gt;ThreadLocal.ThreadLocalMap&lt;/code&gt;成员变量，也就是说每个线程通过&lt;code&gt;ThreadLocal.ThreadLocalMap&lt;/code&gt;与ThreadLocal相绑定，这样可以确保每个线程访问到的thread-local variable都是本线程的。&lt;/p&gt;
&lt;p&gt;我们往下继续分析。获取了&lt;code&gt;ThreadLocalMap&lt;/code&gt;实例以后，如果它不为空则调用&lt;code&gt;ThreadLocalMap.ThreadLocalMap#set&lt;/code&gt;方法设值；若为空则调用&lt;code&gt;ThreadLocal#createMap&lt;/code&gt;方法new一个&lt;code&gt;ThreadLocalMap&lt;/code&gt;实例并赋给&lt;code&gt;Thread.threadLocals&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadLocal#createMap&lt;/code&gt;方法的源码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Thread t, T firstValue)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.threadLocals = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadLocalMap(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, firstValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面我们探究一下&lt;code&gt;ThreadLocalMap&lt;/code&gt;的实现。&lt;/p&gt;
&lt;h1 id=&quot;ThreadLocalMap&quot;&gt;ThreadLocalMap&lt;/h1&gt;&lt;p&gt;ThreadLocalMap是ThreadLocal的静态内部类，它的结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/threadlocal-map-structure.png&quot; alt=&quot;ThreadLocalMap&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到ThreadLocalMap有一个常量和三个成员变量：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The initial capacity -- MUST be a power of two.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; INITIAL_CAPACITY = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The table, resized as necessary.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * table.length MUST always be a power of two.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Entry[] table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The number of entries in the table.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The next size value at which to resize.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threshold; &lt;span class=&quot;comment&quot;&gt;// Default to 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;INITIAL_CAPACITY&lt;/code&gt;代表这个Map的初始容量；1是一个Entry类型的数组，用于存储数据；&lt;code&gt;size&lt;/code&gt;代表表中的存储数目；&lt;code&gt;threshold&lt;/code&gt;代表需要扩容时对应size的阈值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Entry&lt;/code&gt;类是&lt;code&gt;ThreadLocalMap&lt;/code&gt;的静态内部类，用于存储数据。它的源码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The entries in this hash map extend WeakReference, using&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * its main ref field as the key (which is always a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ThreadLocal object).  Note that null keys (i.e. entry.get()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * == null) mean that the key is no longer referenced, so the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * entry can be expunged from table.  Such entries are referred to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * as &quot;stale entries&quot; in the code that follows.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeakReference&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ThreadLocal&lt;/span&gt;&amp;lt;?&amp;gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** The value associated with this ThreadLocal. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Object value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry(ThreadLocal&amp;lt;?&amp;gt; k, Object v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Entry&lt;/code&gt;类继承了&lt;code&gt;WeakReference&amp;lt;ThreadLocal&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt;，即每个Entry对象都有一个ThreadLocal的弱引用（作为key），这是为了防止内存泄露。一旦线程结束，key变为一个不可达的对象，这个Entry就可以被GC了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadLocalMap&lt;/code&gt;类有两个构造函数，其中常用的是&lt;code&gt;ThreadLocalMap(ThreadLocal&amp;lt;?&amp;gt; firstKey, Object firstValue)&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Construct a new map initially containing (firstKey, firstValue).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ThreadLocalMaps are constructed lazily, so we only create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * one when we have at least one entry to put in it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ThreadLocalMap(ThreadLocal&amp;lt;?&amp;gt; firstKey, Object firstValue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Entry[INITIAL_CAPACITY];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = firstKey.threadLocalHashCode &amp;amp; (INITIAL_CAPACITY - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    table[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Entry(firstKey, firstValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    size = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setThreshold(INITIAL_CAPACITY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;构造函数的第一个参数就是本ThreadLocal实例(&lt;code&gt;this&lt;/code&gt;)，第二个参数就是要保存的线程本地变量。构造函数首先创建一个长度为16的Entry数组，然后计算出firstKey对应的哈希值，然后存储到table中，并设置size和threshold。&lt;/p&gt;
&lt;p&gt;注意一个细节，计算hash的时候里面采用了&lt;code&gt;hashCode &amp;amp; (size - 1)&lt;/code&gt;的算法，这相当于取模运算&lt;code&gt;hashCode % size&lt;/code&gt;的一个更高效的实现（和HashMap中的思路相同）。正是因为这种算法，我们要求size必须是&lt;strong&gt;2的指数&lt;/strong&gt;，因为这可以使得hash发生冲突的次数减小。&lt;/p&gt;
&lt;p&gt;接下来我们来看&lt;code&gt;ThreadLocalMap#set&lt;/code&gt;方法的实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Set the value associated with key.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; key the thread local object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; value the value to be set&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ThreadLocal&amp;lt;?&amp;gt; key, Object value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// We don&#39;t use a fast path as with get() because it is at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// least as common to use set() to create new entries as&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// it is to replace existing ones, in which case, a fast&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// path would fail more often than not.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry[] tab = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = tab.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = key.threadLocalHashCode &amp;amp; (len-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Entry e = tab[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         e != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         e = tab[i = nextIndex(i, len)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ThreadLocal&amp;lt;?&amp;gt; k = e.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == key) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            replaceStaleEntry(key, value, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Entry(key, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sz = ++size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!cleanSomeSlots(i, sz) &amp;amp;&amp;amp; sz &amp;gt;= threshold)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rehash();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果冲突了，就会通过&lt;code&gt;nextIndex&lt;/code&gt;方法再次计算哈希值：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Increment i modulo len.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; len) ? i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里，我们看到&lt;code&gt;ThreadLocalMap&lt;/code&gt;解决冲突的方法是&lt;strong&gt;线性探测法&lt;/strong&gt;（不断加1），而不是HashMap的&lt;strong&gt;链地址法&lt;/strong&gt;，这一点也能从Entry的结构上推断出来。&lt;/p&gt;
&lt;p&gt;如果entry里对应的key为&lt;code&gt;null&lt;/code&gt;的话，表明此entry为&lt;code&gt;staled entry&lt;/code&gt;，就将其替换为当前的key和value：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Replace a stale entry encountered during a set operation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * with an entry for the specified key.  The value passed in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the value parameter is stored in the entry, whether or not&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * an entry already exists for the specified key.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * As a side effect, this method expunges all stale entries in the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &quot;run&quot; containing the stale entry.  (A run is a sequence of entries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * between two null slots.)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt;  key the key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt;  value the value to be associated with key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt;  staleSlot index of the first stale entry encountered while&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *         searching for key.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;replaceStaleEntry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ThreadLocal&amp;lt;?&amp;gt; key, Object value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; staleSlot)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry[] tab = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = tab.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Back up to check for prior stale entry in current run.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// We clean out whole runs at a time to avoid continual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// incremental rehashing due to garbage collector freeing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// up refs in bunches (i.e., whenever the collector runs).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; slotToExpunge = staleSlot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = prevIndex(staleSlot, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (e = tab[i]) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         i = prevIndex(i, len))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e.get() == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            slotToExpunge = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Find either the key or trailing null slot of run, whichever&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// occurs first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = nextIndex(staleSlot, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (e = tab[i]) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         i = nextIndex(i, len)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ThreadLocal&amp;lt;?&amp;gt; k = e.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// If we find key, then we need to swap it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// with the stale entry to maintain hash table order.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The newly stale slot, or any other stale slot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// encountered above it, can then be sent to expungeStaleEntry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// to remove or rehash all of the other entries in run.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == key) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tab[i] = tab[staleSlot];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tab[staleSlot] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Start expunge at preceding stale entry if it exists&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (slotToExpunge == staleSlot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                slotToExpunge = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// If we didn&#39;t find stale entry on backward scan, the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// first stale entry seen while scanning for key is the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// first still present in the run.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; slotToExpunge == staleSlot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            slotToExpunge = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If key not found, put new entry in stale slot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab[staleSlot].value = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab[staleSlot] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Entry(key, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If there are any other stale entries in run, expunge them&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (slotToExpunge != staleSlot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体实现不再深究，这替换过程里面也进行了不少的垃圾清理动作以防止引用关系存在而导致的内存泄露。&lt;/p&gt;
&lt;p&gt;若是经历了上面步骤没有命中hash，也没有发现无用的Entry，&lt;code&gt;set&lt;/code&gt;方法就会创建一个新的Entry，并会进行&lt;strong&gt;启发式的垃圾清理&lt;/strong&gt;，用于清理无用的Entry。主要通过&lt;code&gt;cleanSomeSlots&lt;/code&gt;方法进行清理（清理的时机通常为添加新元素或另一个无用的元素被回收时。参见注释）：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Heuristically scan some cells looking for stale entries.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * This is invoked when either a new element is added, or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * another stale one has been expunged. It performs a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * logarithmic number of scans, as a balance between no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * scanning (fast but retains garbage) and a number of scans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * proportional to number of elements, that would find all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * garbage but would cause some insertions to take O(n) time.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; i a position known NOT to hold a stale entry. The&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * scan starts at the element after i.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; n scan control: &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; log2(n)&amp;#125; cells are scanned,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * unless a stale entry is found, in which case&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; log2(table.length)-1&amp;#125; additional cells are scanned.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * When called from insertions, this parameter is the number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * of elements, but when from replaceStaleEntry, it is the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * table length. (Note: all this could be changed to be either&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * more or less aggressive by weighting n instead of just&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * using straight log n. But this version is simple, fast, and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * seems to work well.)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; true if any stale entries have been removed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanSomeSlots&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; removed = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry[] tab = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = tab.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i = nextIndex(i, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Entry e = tab[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; e.get() == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n = len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            removed = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i = expungeStaleEntry(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ( (n &amp;gt;&amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; removed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一旦发现一个位置对应的Entry所持有的ThreadLocal弱引用为null，就会把此位置当做staleSlot并调用&lt;code&gt;expungeStaleEntry&lt;/code&gt;方法进行整理(rehashing)的操作：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Expunge a stale entry by rehashing any possibly colliding entries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * lying between staleSlot and the next null slot.  This also expunges&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * any other stale entries encountered before the trailing null.  See&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Knuth, Section 6.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; staleSlot index of slot known to have null key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the index of the next null slot after staleSlot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * (all between staleSlot and this slot will have been checked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * for expunging).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expungeStaleEntry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; staleSlot)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry[] tab = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = tab.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// expunge entry at staleSlot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab[staleSlot].value = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab[staleSlot] = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    size--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Rehash until we encounter null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = nextIndex(staleSlot, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (e = tab[i]) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         i = nextIndex(i, len)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ThreadLocal&amp;lt;?&amp;gt; k = e.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.value = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tab[i] = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            size--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h = k.threadLocalHashCode &amp;amp; (len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (h != i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                tab[i] = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// Unlike Knuth 6.4 Algorithm R, we must scan until&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// null because multiple entries could have been stale.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (tab[h] != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    h = nextIndex(h, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                tab[h] = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只要没有清理任何的&lt;strong&gt;stale entries&lt;/strong&gt;并且size达到阈值的时候（即table已满，所有元素都可用），都会触发&lt;code&gt;rehashing&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Re-pack and/or re-size the table. First scan the entire&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * table removing stale entries. If this doesn&#39;t sufficiently&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * shrink the size of the table, double the table size.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rehash&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    expungeStaleEntries();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Use lower threshold for doubling to avoid hysteresis&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (size &amp;gt;= threshold - threshold / &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Expunge all stale entries in the table.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;expungeStaleEntries&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry[] tab = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = tab.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; len; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Entry e = tab[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; e.get() == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            expungeStaleEntry(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;rehash操作会执行一次全表的扫描清理工作，并在size大于等于threshold的四分之三时进行resize，即扩容一倍。因此&lt;code&gt;ThreadLocalMap&lt;/code&gt;的加载因子一样为&lt;strong&gt;0.75&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们继续看&lt;code&gt;getEntry&lt;/code&gt;的源码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Get the entry associated with key.  This method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * itself handles only the fast path: a direct hit of existing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * key. It otherwise relays to getEntryAfterMiss.  This is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * designed to maximize performance for direct hits, in part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * by making this method readily inlinable.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt;  key the thread local object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the entry associated with key, or null if no such&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Entry &lt;span class=&quot;title&quot;&gt;getEntry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ThreadLocal&amp;lt;?&amp;gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = key.threadLocalHashCode &amp;amp; (table.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry e = table[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; e.get() == key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getEntryAfterMiss(key, i, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Version of getEntry method for use when key is not found in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * its direct hash slot.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt;  key the thread local object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt;  i the table index for key&#39;s hash code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt;  e the entry at table[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; the entry associated with key, or null if no such&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Entry &lt;span class=&quot;title&quot;&gt;getEntryAfterMiss&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ThreadLocal&amp;lt;?&amp;gt; key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, Entry e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry[] tab = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = tab.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (e != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ThreadLocal&amp;lt;?&amp;gt; k = e.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            expungeStaleEntry(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i = nextIndex(i, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e = tab[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;逻辑很简单，hash以后如果是ThreadLocal对应的Entry就返回，否则调用&lt;code&gt;getEntryAfterMiss&lt;/code&gt;方法，根据线性探测法继续查找，直到找到或对应entry为&lt;code&gt;null&lt;/code&gt;，并返回。&lt;/p&gt;
&lt;p&gt;ThreadLocal的get方法就是调用了&lt;code&gt;ThreadLocalMap&lt;/code&gt;的getEntry方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread t = Thread.currentThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ThreadLocalMap map = getMap(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ThreadLocalMap.Entry e = map.getEntry(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            T result = (T)e.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; setInitialValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;remove&lt;/code&gt;方法的思想类似，直接放源码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Remove the entry for key.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ThreadLocal&amp;lt;?&amp;gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Entry[] tab = table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = tab.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = key.threadLocalHashCode &amp;amp; (len-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Entry e = tab[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         e != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         e = tab[i = nextIndex(i, len)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e.get() == key) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            expungeStaleEntry(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;remove的时候同样也会调用&lt;code&gt;expungeStaleEntry&lt;/code&gt;方法执行清理工作。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;&lt;p&gt;每个Thread里都含有一个ThreadLocalMap的成员变量，这种机制将ThreadLocal和线程巧妙地绑定在了一起，即可以保证无用的ThreadLocal被及时回收，不会造成内存泄露，又可以提升性能。假如我们把ThreadLocalMap做成一个&lt;code&gt;Map&amp;lt;t extends Thread, ?&amp;gt;&lt;/code&gt;类型的Map，那么它存储的东西将会非常多（相当于一张全局线程本地变量表），这样的情况下用线性探测法解决哈希冲突的问题效率会非常差。而JDK里的这种利用ThreadLocal作为key，再将ThreadLocalMap与线程相绑定的实现，完美地解决了这个问题。&lt;/p&gt;
&lt;p&gt;总结一下什么时候无用的Entry会被清理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread结束的时候&lt;/li&gt;
&lt;li&gt;插入元素时，发现&lt;strong&gt;staled entry&lt;/strong&gt;，则会进行替换并清理&lt;/li&gt;
&lt;li&gt;插入元素时，&lt;code&gt;ThreadLocalMap&lt;/code&gt;的&lt;code&gt;size&lt;/code&gt;达到&lt;code&gt;threshold&lt;/code&gt;，并且没有任何&lt;strong&gt;staled entries&lt;/strong&gt;的时候，会调用&lt;code&gt;rehash&lt;/code&gt;方法清理并扩容&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;ThreadLocalMap&lt;/code&gt;的&lt;code&gt;remove&lt;/code&gt;方法或&lt;code&gt;set(null)&lt;/code&gt;时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管不会造成内存泄露，但是可以看到无用的Entry只会在以上四种情况下才会被清理，这就可能导致一些Entry虽然无用但还占内存的情况。因此，我们在使用完ThreadLocal后一定要&lt;code&gt;remove&lt;/code&gt;一下，保证及时回收掉无用的Entry。&lt;/p&gt;
&lt;p&gt;【场景】当应用线程池的时候，由于线程池的线程一般会复用，Thread不结束，这时候用完更需要&lt;code&gt;remove&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;总的来说，对于多线程资源共享的问题，同步机制采用了“&lt;strong&gt;以时间换空间&lt;/strong&gt;”的方式，而ThreadLocal采用了“&lt;strong&gt;以空间换时间&lt;/strong&gt;”的方式。前者仅提供一份变量，让不同的线程排队访问；而后者为每一个线程都提供了一份变量，因此可以同时访问而互不影响。&lt;/p&gt;
&lt;h1 id=&quot;应用&quot;&gt;应用&lt;/h1&gt;&lt;p&gt;应用太多了。。。各大框架都有应用，比如Spring。Spring对一些Bean中的成员变量采用ThreadLocal进行处理，让它们可以成为线程安全的。举个例子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; org.springframework.web.context.request;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RequestContextHolder&lt;/span&gt;  &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; jsfPresent =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ClassUtils.isPresent(&lt;span class=&quot;string&quot;&gt;&quot;javax.faces.context.FacesContext&quot;&lt;/span&gt;, RequestContextHolder.class.getClassLoader());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ThreadLocal&amp;lt;RequestAttributes&amp;gt; requestAttributesHolder =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NamedThreadLocal&amp;lt;RequestAttributes&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;Request attributes&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ThreadLocal&amp;lt;RequestAttributes&amp;gt; inheritableRequestAttributesHolder =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NamedInheritableThreadLocal&amp;lt;RequestAttributes&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;Request context&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//......下面省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再比如Spring MVC中的Controller默认是&lt;strong&gt;singleton&lt;/strong&gt;的，因此如果Controller或其对应的Service里存在非静态成员变量的话，并发访问就会出现race condition问题，这也可以通过&lt;strong&gt;ThreadLocal&lt;/strong&gt;解决。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前只知道ThreadLocal的大致思路，没有去深入研究。今天读了读源码，果然博大精深～&lt;/p&gt;
&lt;p&gt;ThreadLocal提供了线程本地变量，它可以保证访问到的变量属于当前线程，每个线程都保存有一个变量副本，每个线程的变量都不同，而同一个线程在任何时候访问这个本地变量
    
    </summary>
    
      <category term="Java" scheme="http://www.sczyh30.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.sczyh30.com/tags/Java/"/>
    
      <category term="多线程" scheme="http://www.sczyh30.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="http://www.sczyh30.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="线程安全" scheme="http://www.sczyh30.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>并发编程 | JDK 1.8中的CompletableFuture | FRP风格</title>
    <link href="http://www.sczyh30.com/posts/Java/java-8-completable-future/"/>
    <id>http://www.sczyh30.com/posts/Java/java-8-completable-future/</id>
    <published>2016-02-29T16:00:00.000Z</published>
    <updated>2016-03-17T12:08:49.541Z</updated>
    
    <content type="html">&lt;p&gt;Future对象代表一个尚未完成异步操作的结果。从JDK 1.5以来，JUC包一直提供着最基本的Future，不过它太鸡肋了，除了&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;cancel&lt;/code&gt;、&lt;code&gt;isDone&lt;/code&gt;和&lt;code&gt;isCancelled&lt;/code&gt;方法之外就没有其他的操作了，这样很不方便。好在JDK 1.8中引入了具有FRP风格的&lt;code&gt;CompletableFuture&lt;/code&gt;，它类似于Scala中的&lt;code&gt;Future&lt;/code&gt;。&lt;code&gt;CompletableFuture&lt;/code&gt;属于Monad， 因此支持一系列的函数式的组合、运算操作，非常方便，可以写出很FRP风格的代码而摆脱callback hell。&lt;/p&gt;
&lt;p&gt;下面我们来结合FRP的思想，总结一下这些操作（&lt;em&gt;有的时候为了方便表示，我会用Haskell或Scala的语法来表示类型，毕竟Java的类型系统太渣&lt;/em&gt;）：&lt;/p&gt;
&lt;h1 id=&quot;构造CompletableFuture对象&quot;&gt;构造CompletableFuture对象&lt;/h1&gt;&lt;p&gt;CompletableFuture类通过工厂模式创建&lt;code&gt;CompletableFuture&lt;/code&gt;对象：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;supplyAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Supplier&amp;lt;U&amp;gt; supplier)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; asyncSupplyStage(asyncPool, supplier);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;supplyAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Supplier&amp;lt;U&amp;gt; supplier,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   Executor executor)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; asyncSupplyStage(screenExecutor(executor), supplier);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&quot;title&quot;&gt;runAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable runnable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; asyncRunStage(asyncPool, runnable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&quot;title&quot;&gt;runAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Runnable runnable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               Executor executor)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; asyncRunStage(screenExecutor(executor), runnable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们的异步操作不需要返回值，那么可以通过&lt;code&gt;runAsync&lt;/code&gt;方法提供一个Runnable创建一个&lt;code&gt;CompletableFuture&amp;lt;Void&amp;gt;&lt;/code&gt;对象。如果我们的异步操作需要返回值，那么可以通过&lt;code&gt;supplyAsync&lt;/code&gt;方法提供一个&lt;code&gt;Supplier&amp;lt;U&amp;gt;&lt;/code&gt;对象来创建：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; CompletableFuture&amp;lt;String&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; longTask(param));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果不提供&lt;code&gt;Executor&lt;/code&gt;的话，默认使用&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;作为线程池。&lt;/p&gt;
&lt;p&gt;后缀为&lt;code&gt;Async&lt;/code&gt;的方法代表异步执行。&lt;/p&gt;
&lt;h1 id=&quot;变换(fmap)&quot;&gt;变换(fmap)&lt;/h1&gt;&lt;p&gt;假如我们要通过CompletableFuture来异步获取一组数据，并对数据进行一些处理（变换），我们可以使用&lt;code&gt;thenApply&lt;/code&gt;和&lt;code&gt;thenApplyAsync&lt;/code&gt;方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;thenApply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Function&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniApplyStage(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;thenApplyAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Function&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniApplyStage(asyncPool, fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;thenApplyAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Function&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn, Executor executor)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniApplyStage(screenExecutor(executor), fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它其实就是&lt;code&gt;fmap&lt;/code&gt;算子(Java和Scala中为&lt;code&gt;map&lt;/code&gt;)，用Haskell表示原型为：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 对比一下fmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;fmap&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; f =&amp;gt; (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;thenApply&lt;/span&gt; :: (a -&amp;gt; b) -&amp;gt; &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; a -&amp;gt; &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它们不仅可以变换数据的值，也可以变换数据的类型，如：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CompletableFuture&amp;lt;Double&amp;gt; f = CompletableFuture.supplyAsync(() -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;4&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .thenApply(Integer::parseInt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .thenApply(r -&amp;gt; r * r * Math.PI);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;fmap以后，数据流的类型进行了以下变换：&lt;code&gt;String -&amp;gt; Integer -&amp;gt; Double&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;组合(bind)&quot;&gt;组合(bind)&lt;/h1&gt;&lt;p&gt;有的时候，我们需要在异步操作完成的时候对异步操作的结果进行一些操作，并且操作仍然返回&lt;code&gt;CCompletableFuture&lt;/code&gt;类型。我们可以利用&lt;code&gt;thenCompose&lt;/code&gt;方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;thenCompose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Function&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniComposeStage(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;thenComposeAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Function&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniComposeStage(asyncPool, fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&quot;title&quot;&gt;thenComposeAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Function&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Executor executor)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uniComposeStage(screenExecutor(executor), fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看出它其实对应了Monad里的&lt;code&gt;bind&lt;/code&gt;操作(Java和Scala中为&lt;code&gt;flatMap&lt;/code&gt;)，用Haskell表示原型为：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&amp;gt;&amp;gt;=) :: &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; m =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;thenCompose&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; a -&amp;gt; (a -&amp;gt; &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; b) -&amp;gt; &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;thenCompose&lt;/code&gt;是一个非常重要的操作，它对于程序的健壮性，以及构建异步的pipeline，都非常有用。举个简单的例子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TaskWorkI&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Optional&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; longTask(Integer i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pc = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; pc &amp;lt; i; pc++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                list.add(pc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Optional.of(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Optional.empty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Long&amp;gt; &lt;span class=&quot;title&quot;&gt;getResultFuture&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Optional&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; op)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (op.isPresent())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; op.get().stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .map(Integer::toUnsignedLong)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .reduce(&lt;span class=&quot;number&quot;&gt;0L&lt;/span&gt;, (x, y) -&amp;gt; x + y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CompletableFuture&amp;lt;Long&amp;gt; f = CompletableFuture.supplyAsync(() -&amp;gt; longTask(&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .thenComposeAsync(TaskWorkI::getResultFuture);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Long result = f.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;超级变换(liftM2)&quot;&gt;超级变换(liftM2)&lt;/h1&gt;&lt;p&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;类里面还有个&lt;code&gt;thenCombine&lt;/code&gt;操作，它的原型看起来非常晕：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;V&amp;gt; &lt;span class=&quot;title&quot;&gt;thenCombine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CompletionStage&amp;lt;? extends U&amp;gt; other,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BiFunction&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; biApplyStage(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, other, fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;V&amp;gt; &lt;span class=&quot;title&quot;&gt;thenCombineAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CompletionStage&amp;lt;? extends U&amp;gt; other,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BiFunction&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; biApplyStage(asyncPool, other, fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; &lt;span class=&quot;function&quot;&gt;CompletableFuture&amp;lt;V&amp;gt; &lt;span class=&quot;title&quot;&gt;thenCombineAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CompletionStage&amp;lt;? extends U&amp;gt; other,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BiFunction&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn, Executor executor)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; biApplyStage(screenExecutor(executor), other, fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Java类型系统过于坑爹，我们用Haskell表示其原型就一目了然了：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;thenCombine&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; a -&amp;gt; &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; b -&amp;gt; (a -&amp;gt; b -&amp;gt; c) -&amp;gt; &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把参数调调位置，可以发现&lt;code&gt;thenCombine&lt;/code&gt;其实类似于Haskell中的&lt;code&gt;liftM2&lt;/code&gt;操作：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;liftM2&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; m =&amp;gt; (a1 -&amp;gt; a2 -&amp;gt; r) -&amp;gt; m a1 -&amp;gt; m a2 -&amp;gt; m r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;thenCombine&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;CompletableFuture&lt;/span&gt; m =&amp;gt; (a -&amp;gt; b -&amp;gt; c) -&amp;gt; m a -&amp;gt; m b -&amp;gt; m c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;未完待续。。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Future对象代表一个尚未完成异步操作的结果。从JDK 1.5以来，JUC包一直提供着最基本的Future，不过它太鸡肋了，除了&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;cancel&lt;/code&gt;、&lt;code&gt;isDone&lt;/code&gt;和&lt;code&gt;isCancell
    
    </summary>
    
      <category term="Java" scheme="http://www.sczyh30.com/categories/Java/"/>
    
    
      <category term="FRP" scheme="http://www.sczyh30.com/tags/FRP/"/>
    
      <category term="JUC" scheme="http://www.sczyh30.com/tags/JUC/"/>
    
      <category term="Java" scheme="http://www.sczyh30.com/tags/Java/"/>
    
      <category term="并发" scheme="http://www.sczyh30.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="异步" scheme="http://www.sczyh30.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Scala | 利用Curry-Howard Isomorphism实现union type</title>
    <link href="http://www.sczyh30.com/posts/Functional-Programming/fp-scala-union-curry-howard-isomorphism/"/>
    <id>http://www.sczyh30.com/posts/Functional-Programming/fp-scala-union-curry-howard-isomorphism/</id>
    <published>2016-02-25T16:00:00.000Z</published>
    <updated>2016-03-06T09:15:51.052Z</updated>
    
    <content type="html">&lt;p&gt;所谓的联合类型(union type)，在逻辑上是“或”的意思，如&lt;code&gt;A or B or C&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假设我们想实现这样一个函数size，它可以计算一个联合类型对象（Int与String）的长度。我们期望size函数只接受Int类型或String类型（以及它们的子类型，如Null和Nothing）的对象，而不接受任何其他类型的对象：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;(&lt;/span&gt;x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) = x &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; i: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; s: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; =&amp;gt; s.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;size(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;size(&lt;span class=&quot;string&quot;&gt;&quot;fuck&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;size(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;)        &lt;span class=&quot;comment&quot;&gt;// 编译错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Scala中的&lt;code&gt;Either&lt;/code&gt;类型可以提供一种不支持子类型的联合类型。举个例子，用&lt;code&gt;Either&lt;/code&gt;实现size函数：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;(&lt;/span&gt;x: &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]) = x &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(i) =&amp;gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(s) =&amp;gt; s.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;size(&lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;size(&lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fuck&quot;&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;size(&lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;lv&quot;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// error: type mismatch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以观察出一个问题，那就是要使用Either类型就不可避免要把对象包装成Either类型（&lt;code&gt;Left&lt;/code&gt;或&lt;code&gt;Right&lt;/code&gt;），这是不方便的。我们需要一些奇技淫巧来实现一个原生类型版本(unboxed)的size函数，这就是下面要介绍的&lt;strong&gt;Curry-Howard Isomorphism&lt;/strong&gt;（柯里-霍华德同构）。&lt;/p&gt;
&lt;h1 id=&quot;Curry-Howard_同构&quot;&gt;Curry-Howard 同构&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Curry-Howard 同构&lt;/a&gt;通过命题表示了计算机程序与数理逻辑之间的直接联系(逻辑上的等价关系)，即我们可以利用数理逻辑中的某些东西来去表示程序中的特定逻辑。比如在Curry-Howard 同构中，有以下的等价关系：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;类型系统(Scala)&lt;/th&gt;
&lt;th&gt;命题逻辑&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;联合类型（并，析取）&lt;/td&gt;
&lt;td&gt;A ∨ B（∨为自定义的析取类型）&lt;/td&gt;
&lt;td&gt;A ∨ B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交集类型（交，合取）&lt;/td&gt;
&lt;td&gt;A with B&lt;/td&gt;
&lt;td&gt;A ∧ B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;子类型（蕴含）&lt;/td&gt;
&lt;td&gt;A &amp;lt;: B&lt;/td&gt;
&lt;td&gt;A ⇒ B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;因此联合类型可以表示为析取式，如&lt;code&gt;P ∨ Q ∨ R&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么如何根据Curry-Howard 同构实现一个析取类型呢？我们可以先利用&lt;strong&gt;德摩根定律&lt;/strong&gt;(De Morgan’s laws)做一个转化。已知德摩根定律：&lt;br&gt;&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;literal&quot;&gt;A&lt;/span&gt; ∨ B) ⇔ ¬(¬&lt;span class=&quot;literal&quot;&gt;A&lt;/span&gt; ∧ ¬B)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用Scala代码就可以表示为：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;) =:= ¬[¬[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ¬[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，问题就转化成了如何实现一个否定类型(¬)。我们从另一个角度去利用Curry-Howard 同构。在类型系统理论中，存在以下等价关系：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;例&lt;/th&gt;
&lt;th&gt;对应命题逻辑&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Sum Type&lt;/td&gt;
&lt;td&gt;A ∨ B（∨为自定义的析取类型）&lt;/td&gt;
&lt;td&gt;析取(A ∨ B)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Product Type&lt;/td&gt;
&lt;td&gt;(A, B)&lt;/td&gt;
&lt;td&gt;合取(A ∧ B)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Function Type&lt;/td&gt;
&lt;td&gt;Function1[A, B]&lt;/td&gt;
&lt;td&gt;蕴含(A ⇒ B)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;再根据以下的等价关系：&lt;br&gt;&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;literal&quot;&gt;A&lt;/span&gt; ⇒ &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;) ⇔ ¬&lt;span class=&quot;literal&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们就可以写出Scala中对应的类型：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样我们就可以定义两个类型：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;¬&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;∨&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;] = ¬[¬[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ¬[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在REPL里测试一下：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;¬&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;$u00AC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;∨&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;] = ¬[¬[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ¬[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;$u2228&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; implicitly[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;console&amp;gt;:&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;: error: &lt;span class=&quot;type&quot;&gt;Cannot&lt;/span&gt; prove that &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;lt;:&amp;lt; ∨[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       implicitly[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;嗯？哪里出问题了？我们来分析一下&lt;code&gt;(Int ∨ String)&lt;/code&gt;这个类型的kind：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; :k ∨[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala.&lt;span class=&quot;type&quot;&gt;Function1&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt; kind is &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[-&lt;span class=&quot;type&quot;&gt;A1&lt;/span&gt;,+&lt;span class=&quot;type&quot;&gt;A2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;原来(Int ∨ String)的类型是函数类型，也就是说我们创造的Union Type是函数类型，那Int类型自然不是(Int ∨ String)的子类型了，因为它连函数类型都不是。我们需要将&lt;code&gt;&amp;lt;:&amp;lt;&lt;/code&gt;操作符左边的类型转化成函数类型，比如双重否定类型（逻辑上相当于原类型，但其类型为函数类型）：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;¬¬&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] = ¬[¬[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再测试一下：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;¬¬&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] = ¬[¬[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;$u00AC$u00AC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; implicitly[¬¬[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res2: &amp;lt;:&amp;lt;[¬¬[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;],∨[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]] = &amp;lt;function1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; implicitly[¬¬[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res3: &amp;lt;:&amp;lt;[¬¬[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;],∨[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]] = &amp;lt;function1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; implicitly[¬¬[&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;] &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;console&amp;gt;:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;: error: &lt;span class=&quot;type&quot;&gt;Cannot&lt;/span&gt; prove that ¬¬[&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;] &amp;lt;:&amp;lt; ∨[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       implicitly[¬¬[&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;] &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功了！&lt;code&gt;¬¬[Int]&lt;/code&gt;和&lt;code&gt;¬¬[String]&lt;/code&gt;都是&lt;code&gt;∨[Int,String]&lt;/code&gt;的子类型。把Int换成Double，无法通过编译。下面我们就可以利用隐式转换实现我们的size函数了：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;](t: &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; ev: (¬¬[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;))) = t &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; i: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; s: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; =&amp;gt; s.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试一下，结果very good～&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; size(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res5: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; size(&lt;span class=&quot;string&quot;&gt;&quot;Scala&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res6: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; size(&lt;span class=&quot;number&quot;&gt;6.666&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;console&amp;gt;:&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;: error: &lt;span class=&quot;type&quot;&gt;Cannot&lt;/span&gt; prove that ¬¬[&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;] &amp;lt;:&amp;lt; ∨[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       size(&lt;span class=&quot;number&quot;&gt;6.666&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ^&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后还可以用一个小trick来简化函数的参数，省掉implicit（利用结构类型、类型投影及type lambda，神奇）：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;|∨|&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;] = &amp;#123; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;λ&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;X&lt;/span&gt;] = ¬¬[&lt;span class=&quot;type&quot;&gt;X&lt;/span&gt;] &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;: (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; |∨| &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)#λ](t: &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; i: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; s: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; =&amp;gt; s.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以我们union type及size函数的最终实现为：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;¬&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; ⇒ &lt;span class=&quot;type&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;∨&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;] = ¬[¬[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; ¬[&lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;¬¬&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] = ¬[¬[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;|∨|&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;] = &amp;#123; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;λ&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;X&lt;/span&gt;] = ¬¬[&lt;span class=&quot;type&quot;&gt;X&lt;/span&gt;] &amp;lt;:&amp;lt; (&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; ∨ &lt;span class=&quot;type&quot;&gt;U&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; : (&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; |∨| &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)#λ](t : &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;) = t &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; i : &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; ⇒ i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; s : &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; ⇒ s.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总结一下，整个过程的本质都是在进行类型推导和证明，因此我们可以将Curry-Howard 同构理解为&lt;strong&gt;类型证明即程序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实类型系统还有很多好玩的东西，比如&lt;strong&gt;dependent type&lt;/strong&gt;。。后边可以用Scala玩玩。&lt;/p&gt;
&lt;p&gt;最后吐槽一下Scala。。。不明白Scala标准为什么不支持原生的union type。。本来应该由Scala编译器做的事都要交给我们做了(%&amp;gt;_&amp;lt;%)&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Reference&quot;&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://milessabin.com/blog/2011/06/09/scala-union-types-curry-howard/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unboxed union types in Scala via the Curry-Howard isomorphism, Miles Sabin&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的联合类型(union type)，在逻辑上是“或”的意思，如&lt;code&gt;A or B or C&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假设我们想实现这样一个函数size，它可以计算一个联合类型对象（Int与String）的长度。我们期望size函数只接受Int类型或Strin
    
    </summary>
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/categories/Functional-Programming/"/>
    
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/tags/Functional-Programming/"/>
    
      <category term="Mathematical Logic" scheme="http://www.sczyh30.com/tags/Mathematical-Logic/"/>
    
      <category term="Scala" scheme="http://www.sczyh30.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scala | for表达式的底层转换</title>
    <link href="http://www.sczyh30.com/posts/Functional-Programming/fp-scala-for-expression-detail/"/>
    <id>http://www.sczyh30.com/posts/Functional-Programming/fp-scala-for-expression-detail/</id>
    <published>2016-02-24T16:00:00.000Z</published>
    <updated>2016-03-06T12:17:48.732Z</updated>
    
    <content type="html">&lt;p&gt;Scala中的for表达式为一种方便的语法糖，它实际上是几种操作&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;flatMap&lt;/code&gt;和&lt;code&gt;filter&lt;/code&gt;的组合。for表达式可以这样表述：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ([pattern &amp;lt;- generator; definition*]+; filter* )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;] expression&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Scala中的for表达式与Haskell中的do-notation类似，都是对操作组合过程的简化，操作的对象都是Monad。这里就类比Haskell中的do-notation来总结Scala中的for-expression。&lt;/p&gt;
&lt;h1 id=&quot;最简单的for表达式&quot;&gt;最简单的for表达式&lt;/h1&gt;&lt;p&gt;让我们来看看最简单的，只有一个generator的for表达式：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (x &amp;lt;- e1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; e2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它会被转化为&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;e1 map &amp;#123;x =&amp;gt; e2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们通过Quasiquotes获取AST来验证：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e1&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e1: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;/span&gt;x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) = x * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f1: (x: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; q&lt;span class=&quot;string&quot;&gt;&quot; for (x &amp;lt;- e1) yield f1 _ &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res2: reflect.runtime.universe.&lt;span class=&quot;type&quot;&gt;Tree&lt;/span&gt; = e1.map(((x) =&amp;gt; (f1: (() =&amp;gt; &amp;lt;empty&amp;gt;))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Haskell中原表达式等价于：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x &amp;lt;- e1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return e2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;转换为非do-notation：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;e1&lt;/span&gt; &amp;gt;&amp;gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     \x -&amp;gt; return e2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据Monad Laws - Right Unit转化：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;fmap&lt;/span&gt; (\x -&amp;gt; e2) e1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;多个generator的for表达式&quot;&gt;多个generator的for表达式&lt;/h1&gt;&lt;p&gt;多个generator其实就是&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;flatMap&lt;/code&gt;(&lt;code&gt;fmap&lt;/code&gt;和&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;)的组合，比如：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (x &amp;lt;- e1; y &amp;lt;- e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; e3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;会转化为&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;e1.flatMap(x =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (y &amp;lt;- e2) &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; e3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;e1 flatMap &amp;#123; x =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e2 map &amp;#123; y =&amp;gt; e3 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;REPL里验证：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; q&lt;span class=&quot;string&quot;&gt;&quot;for(x &amp;lt;- e1; y &amp;lt;- e2) yield x + y&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res3: reflect.runtime.universe.&lt;span class=&quot;type&quot;&gt;Tree&lt;/span&gt; = e1.flatMap(((x) =&amp;gt; e2.map(((y) =&amp;gt; x.$plus(y)))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;举例(Scala):&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e1&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e2&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(x &amp;lt;- e1; y &amp;lt;- e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; x + y &lt;span class=&quot;comment&quot;&gt;// List(5, 6, 7, 6, 7, 8, 7, 8, 9)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt; =&lt;/span&gt; e1 flatMap &amp;#123; x =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e2 map &amp;#123; y =&amp;gt; x + y &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// List(5, 6, 7, 6, 7, 8, 7, 8, 9)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Haskell中原表达式等价于：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x &amp;lt;- e1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y &amp;lt;- e2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return e3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;转换为非do-notation：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;e1&lt;/span&gt; &amp;gt;&amp;gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     \x -&amp;gt; e2 &amp;gt;&amp;gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         \y -&amp;gt; return e3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据Monad Laws - Right Unit转化：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;e1&lt;/span&gt; &amp;gt;&amp;gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \x -&amp;gt; fmap (\y -&amp;gt; e3) e2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;举例(Haskell)：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- result: [5,6,7,6,7,8,7,8,9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt; :: (&lt;span class=&quot;type&quot;&gt;Num&lt;/span&gt; a) =&amp;gt; [a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x &amp;lt;- [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y &amp;lt;- [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (x + y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f3&lt;/span&gt; :: (&lt;span class=&quot;type&quot;&gt;Num&lt;/span&gt; a) =&amp;gt; [a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f3&lt;/span&gt; = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] &amp;gt;&amp;gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     \x -&amp;gt; [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] &amp;gt;&amp;gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          \y -&amp;gt; return (x + y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f4&lt;/span&gt; :: (&lt;span class=&quot;type&quot;&gt;Num&lt;/span&gt; a) =&amp;gt; [a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f4&lt;/span&gt; = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] &amp;gt;&amp;gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     \x -&amp;gt; fmap (\y -&amp;gt; x + y) [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;含副作用的for表达式&quot;&gt;含副作用的for表达式&lt;/h1&gt;&lt;p&gt;Scala中，for表达式也有支持side effects的版本，比如：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(x &amp;lt;- e1; y &amp;lt;- e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(x * y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它的转化和含yield的差不多，只不过它用含副作用的foreach操作替代了map和flatMap算子：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;e1 foreach &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x =&amp;gt; e2 foreach &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        y =&amp;gt; println(x * y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;含条件的for表达式&quot;&gt;含条件的for表达式&lt;/h1&gt;&lt;p&gt;Scala支持含有&lt;code&gt;if guard&lt;/code&gt;的for表达式，其中&lt;code&gt;if guard&lt;/code&gt;对应filter算子。&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (x &amp;lt;- e1 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; e2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;会转化为：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (x &amp;lt;- e1 withFilter &amp;#123;x =&amp;gt; f&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; e2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;e1 withFilter &amp;#123;x =&amp;gt; f&amp;#125; map &amp;#123;x =&amp;gt; e2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;REPL里验证：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; reify( &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(x &amp;lt;- e1 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; f1 _ )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res20: reflect.runtime.universe.&lt;span class=&quot;type&quot;&gt;Expr&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Expr&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]]($read.e1.withFilter(((x) =&amp;gt; x.$greater(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))).map(((x) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ((x) =&amp;gt; $read.f1(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;))(&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;.canBuildFrom))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scala&amp;gt; q&lt;span class=&quot;string&quot;&gt;&quot; for(x &amp;lt;- e1 if x &amp;gt; 2) yield f1 _ &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res21: reflect.runtime.universe.&lt;span class=&quot;type&quot;&gt;Tree&lt;/span&gt; = e1.withFilter(((x) =&amp;gt; x.$greater(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))).map(((x) =&amp;gt; (f1: (() =&amp;gt; &amp;lt;empty&amp;gt;))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：definition会影响for表达式的展开（多一次map），后边有时间再总结。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Scala中的for表达式为一种方便的语法糖，它实际上是几种操作&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;flatMap&lt;/code&gt;和&lt;code&gt;filter&lt;/code&gt;的组合。for表达式可以这样表述：&lt;br&gt;&lt;figure class=&quot;highlight sc
    
    </summary>
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/categories/Functional-Programming/"/>
    
    
      <category term="Functional Programming" scheme="http://www.sczyh30.com/tags/Functional-Programming/"/>
    
      <category term="Haskell" scheme="http://www.sczyh30.com/tags/Haskell/"/>
    
      <category term="Scala" scheme="http://www.sczyh30.com/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>快速排序实现及优化 | DualPivotQuicksort</title>
    <link href="http://www.sczyh30.com/posts/Algorithm/algorithm-quicksort/"/>
    <id>http://www.sczyh30.com/posts/Algorithm/algorithm-quicksort/</id>
    <published>2016-02-22T16:00:00.000Z</published>
    <updated>2016-03-23T07:18:12.279Z</updated>
    
    <content type="html">&lt;h1 id=&quot;快速排序的基本实现&quot;&gt;快速排序的基本实现&lt;/h1&gt;&lt;p&gt;快速排序算法是一种基于交换的高效的排序算法，它采用了&lt;strong&gt;分治法&lt;/strong&gt;的思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从数列中取出一个数作为基准数（枢轴，pivot）。&lt;/li&gt;
&lt;li&gt;将数组进行划分(partition)，将比基准数大的元素都移至枢轴右边，将小于等于基准数的元素都移至枢轴左边。&lt;/li&gt;
&lt;li&gt;再对左右的子区间重复第二步的划分操作，直至每个子区间只有一个元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;快排最重要的一步就是划分了。划分的过程用通俗的语言讲就是“挖坑”和“填坑”。&lt;/p&gt;
&lt;p&gt;举个例子，首先给一组数组：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;pivot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;-7&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;为了方便起见，我们选择第一个元素36作为基准数，这样就腾出了第一个位置（挖坑），下面首先自右向左寻找比基准数小的元素填至第一个位置（填坑）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;pivot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;-7&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第七个位置被腾出，然后再自左向右寻找比基准元素大的元素填在空位处：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;pivot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;-7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;再重复上面的动作，直到第一趟划分完毕。此时[a0,a3]都是小于基准值a4的，[a5,a6]都是大于基准值a4的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;pivot&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;-7&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;然后再对两个子序列递归地进行上述的过程，最终可得到有序序列。&lt;/p&gt;
&lt;p&gt;总结一下这个划分的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设两个指示i=left，j=right；设arr[left]为基准数&lt;/li&gt;
&lt;li&gt;从后向前寻找比基准元素大的元素，填至空位处&lt;/li&gt;
&lt;li&gt;从前向后寻找比基准元素小的元素，填至空位处&lt;/li&gt;
&lt;li&gt;重复执行2、3步，直到两指示相等，将基准元素填至指示的位置，本次划分结束&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用代码表示为：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = left, j = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = arr[left];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; j &amp;amp;&amp;amp; arr[j] &amp;gt; tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i &amp;lt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arr[i] = arr[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; j &amp;amp;&amp;amp; arr[i] &amp;lt; tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i &amp;lt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arr[j] = arr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr[i] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(left &amp;gt; right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = partition(arr, left, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quick_sort(arr, left, j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quick_sort(arr, j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然用Haskell写是最简单的了:)&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;qs&lt;/span&gt; :: (&lt;span class=&quot;type&quot;&gt;Ord&lt;/span&gt; a) =&amp;gt; [a] -&amp;gt; [a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;qs&lt;/span&gt; [] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;qs&lt;/span&gt; (x:xs) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = qs $ filter (&amp;lt;= x) xs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        l = qs $ filter (&amp;gt; x)  xs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s ++ [x] ++ l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种实现划分的思路是先从左到右扫描一个比基准数大的元素，再从右到左扫描一个比基准数小的元素（左右两个指针i、j滑动），然后交换这两个元素，重复操作直到两指针相遇，然后将基准元素arr[left]与左子序列最后的元素arr[j]进行交换即可，用代码描述为：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = left, j = right + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = arr[left];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(arr[++i] &amp;lt; temp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i == right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(arr[--j] &amp;gt; temp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j == left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i &amp;gt;= j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        swap(&amp;amp;arr[i], &amp;amp;arr[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    swap(&amp;amp;arr[left], &amp;amp;arr[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;快速排序算法的平均时间复杂度为&lt;code&gt;O(NlogN)&lt;/code&gt;。快排的最差情况为序列完全有序，此时快排退化为冒泡排序，时间复杂度为&lt;code&gt;O(n^2)&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;快速排序的改进和优化(2016-2-23更新)&quot;&gt;快速排序的改进和优化(2016.2.23更新)&lt;/h1&gt;&lt;p&gt;快速排序也有不足之处，比如&lt;strong&gt;对于元素较少或接近有序的数组来说，快速排序比插入排序慢&lt;/strong&gt;。针对这种情况，我们可以加个判断，&lt;strong&gt;对小数组使用插入排序&lt;/strong&gt;（Java标准库自带的排序就是这么干的，INSERTION_SORT_THRESHOLD = 47）。&lt;/p&gt;
&lt;p&gt;另外一个改进快速排序性能的方法就是使用&lt;strong&gt;双枢轴&lt;/strong&gt;，即将数组三切分(大于枢轴，等于枢轴，小于枢轴），可以证明这样是熵最优的并且更高效。以Java标准库为例，JDK1.7中的DualPivotQuicksort实现了一种&lt;strong&gt;快速三向切分&lt;/strong&gt;的快速排序，它通过将相等元素聚集起来的方式使熵最优（原理：&lt;strong&gt;将相等元素聚集起来&lt;/strong&gt;，不必再切分这些元素）。&lt;/p&gt;
&lt;p&gt;还有一个优化的杀手锏就是改进划分的策略，这里DualPivotQuicksort使用了一种称为&lt;strong&gt;五取样划分&lt;/strong&gt;的策略对数组进行划分。&lt;/p&gt;
&lt;p&gt;总结一下，快排的改进主要有三种方法：小数组使用插入排序、双枢轴快速三向切分、五取样划分。具体实现可以看&lt;a href=&quot;http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/e2117e30fb39/src/share/classes/java/util/DualPivotQuicksort.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DualPivotQuicksort的源码&lt;/a&gt;，实现的很复杂，非常奇妙。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220202246946&quot; alt=&quot;快速三向切分&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速排序的基本实现&quot;&gt;快速排序的基本实现&lt;/h1&gt;&lt;p&gt;快速排序算法是一种基于交换的高效的排序算法，它采用了&lt;strong&gt;分治法&lt;/strong&gt;的思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从数列中取出一个数作为基准数（枢轴，pivot）。&lt;/li&gt;
&lt;li&gt;将数组进行
    
    </summary>
    
      <category term="Algorithm" scheme="http://www.sczyh30.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://www.sczyh30.com/tags/Algorithm/"/>
    
      <category term="Sort" scheme="http://www.sczyh30.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>IO模型之阻塞、非阻塞、同步、异步浅析</title>
    <link href="http://www.sczyh30.com/posts/Network/network-io-model/"/>
    <id>http://www.sczyh30.com/posts/Network/network-io-model/</id>
    <published>2016-02-15T16:00:00.000Z</published>
    <updated>2016-03-17T12:01:09.758Z</updated>
    
    <content type="html">&lt;p&gt;//这里先简单总结一下，过几天有时间再详细写:)&lt;/p&gt;
&lt;p&gt;服务器端编程常需要接触IO。最近学习Netty的时候对IO模型有了进一步的认识，这里总结一下。常见的IO模型有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞IO（Blocking IO）&lt;/li&gt;
&lt;li&gt;同步非阻塞IO（Non-blocking IO）&lt;/li&gt;
&lt;li&gt;IO多路复用（IO Multiplexing），较为典型的为select和epoll模型&lt;/li&gt;
&lt;li&gt;异步IO（Asynchronous IO）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里先解析一下阻塞、非阻塞，同步和异步这两组概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同步和异步&lt;/strong&gt;的概念描述的是&lt;strong&gt;用户线程与内核的交互方式&lt;/strong&gt;：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阻塞和非阻塞&lt;/strong&gt;的概念描述的是&lt;strong&gt;用户线程调用内核IO操作的方式&lt;/strong&gt;：阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。&lt;/p&gt;
&lt;p&gt;只有在同步的情况下才分阻塞和非阻塞。&lt;/p&gt;
&lt;h1 id=&quot;通俗解释&quot;&gt;通俗解释&lt;/h1&gt;&lt;p&gt;同步阻塞IO：去餐厅吃饭，等餐的时候需要在取餐处一直等着，不能干其他事情。&lt;/p&gt;
&lt;p&gt;同步非阻塞IO：去餐厅吃饭，等餐的时候可以干别的事，但需要不断去窗口询问饭是否准备好了（轮询）。&lt;/p&gt;
&lt;p&gt;异步IO：去餐厅吃饭，等餐的时候只需要坐着等人送来即可。&lt;/p&gt;
&lt;h1 id=&quot;详细解释&quot;&gt;详细解释&lt;/h1&gt;&lt;p&gt;Pending。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;//这里先简单总结一下，过几天有时间再详细写:)&lt;/p&gt;
&lt;p&gt;服务器端编程常需要接触IO。最近学习Netty的时候对IO模型有了进一步的认识，这里总结一下。常见的IO模型有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞IO（Blocking IO）&lt;/li&gt;
&lt;li&gt;同步非阻
    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="AIO" scheme="http://www.sczyh30.com/tags/AIO/"/>
    
      <category term="IO" scheme="http://www.sczyh30.com/tags/IO/"/>
    
      <category term="Linux" scheme="http://www.sczyh30.com/tags/Linux/"/>
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
      <category term="异步" scheme="http://www.sczyh30.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>TCP 相关知识总结目录</title>
    <link href="http://www.sczyh30.com/posts/Network/tcp-series/"/>
    <id>http://www.sczyh30.com/posts/Network/tcp-series/</id>
    <published>2016-02-04T16:00:00.000Z</published>
    <updated>2016-02-26T13:58:04.991Z</updated>
    
    <content type="html">&lt;p&gt;寒假翻了翻TCP/IP Illustrated, Volume 1的第二版，将里面的一些新知识与上个暑假总结的第一版的相关知识结合起来，针对TCP部分重新做了个总结~目前已经大体总结完毕，这里列个目录方便查阅：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sczyh30.com/posts/Network/tcp-connection/&quot;&gt;TCP连接的建立和终止&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sczyh30.com/posts/Network/tcp-retransmission/&quot;&gt;TCP 超时与重传机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sczyh30.com/posts/Network/tcp-flow-control/&quot;&gt;TCP 流量控制 &amp;amp;&amp;amp; 滑动窗口机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sczyh30.com/posts/Network/tcp-congestion-control/&quot;&gt;TCP 拥塞控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sczyh30.com/posts/Network/tcp-keepalive-heartbeat/&quot;&gt;TCP Keepalive机制 &amp;amp;&amp;amp; 心跳检测&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;寒假翻了翻TCP/IP Illustrated, Volume 1的第二版，将里面的一些新知识与上个暑假总结的第一版的相关知识结合起来，针对TCP部分重新做了个总结~目前已经大体总结完毕，这里列个目录方便查阅：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ww
    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
      <category term="TCP" scheme="http://www.sczyh30.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>TCP Keepalive &amp;&amp; Heartbeat</title>
    <link href="http://www.sczyh30.com/posts/Network/tcp-keepalive-heartbeat/"/>
    <id>http://www.sczyh30.com/posts/Network/tcp-keepalive-heartbeat/</id>
    <published>2016-02-03T16:00:00.000Z</published>
    <updated>2016-02-15T13:52:59.406Z</updated>
    
    <content type="html">&lt;p&gt;在默认情况下，在建立TCP连接之后，空闲时刻客户端和服务端不会互相发送数据包确认连接。假如有一端发生异常而掉线（如死机、防火墙拦截包、服务器爆炸），另一端若不进行连接确认，则会一直消耗资源。&lt;/p&gt;
&lt;p&gt;为了保证连接的有效性，可以检测到对方端非正常的断开，我们通常利用两种机制来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用TCP协议的Keepalive&lt;/li&gt;
&lt;li&gt;在应用层实现心跳检测(Heart Beat)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;TCP_Keepalive&quot;&gt;TCP Keepalive&lt;/h1&gt;&lt;p&gt;TCP Keepalive通过定时发送Keepalive探测包来探测连接的对端是否存活。&lt;/p&gt;
&lt;p&gt;交互过程：&lt;/p&gt;
&lt;p&gt;在收到对端的确认报文后，设置keepalive timer。当长时间两端无交互并且保活定时器超时的时候，本段会发送keepalive probe等待对端确认。若对端在一定时间内确认（具体的规则貌似比较繁琐），keepalive timer重置；否则，长时间未响应，连接终止。&lt;/p&gt;
&lt;p&gt;TCP Keepalive默认是关闭的，因为它会消耗额外的资源，并且可能会关闭正常的连接。（它也非TCP标准，详情可见The Host Requirements RFC [RFC1122]）&lt;/p&gt;
&lt;p&gt;在Linux Kernal中可以调整以下几个数值来设置Keepalive的属性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;sysctl variables&lt;/th&gt;
&lt;th&gt;net.ipv4.tcp_keepalive_time&lt;/th&gt;
&lt;th&gt;net.ipv4.tcp_keepalive_intvl&lt;/th&gt;
&lt;th&gt;net.ipv4.tcp_keepalive_probes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;7200s&lt;/td&gt;
&lt;td&gt;75s&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Heart_Beat&quot;&gt;Heart Beat&lt;/h1&gt;&lt;p&gt;很多应用层协议都有心跳检测机制，客户端每隔一段时间就会向服务端发送一个数据包，通知服务端自己&lt;strong&gt;可以正常工作&lt;/strong&gt;，同时传递一些数据。&lt;/p&gt;
&lt;p&gt;两种方式的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP Keepalive是TCP协议自带的实现，使用简单，其发送的数据包与应用层心跳检测包相比更小，但其功能也简单，仅提供检测连接功能&lt;/li&gt;
&lt;li&gt;应用层心跳包不依赖于传输层协议，无论传输层协议是TCP还是UDP都可以用&lt;/li&gt;
&lt;li&gt;应用层心跳包可以定制，可以应对更复杂的情况或传输一些额外信息&lt;/li&gt;
&lt;li&gt;Keepalive仅代表连接保持着，而心跳包往往还代表客户端可正常工作&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在默认情况下，在建立TCP连接之后，空闲时刻客户端和服务端不会互相发送数据包确认连接。假如有一端发生异常而掉线（如死机、防火墙拦截包、服务器爆炸），另一端若不进行连接确认，则会一直消耗资源。&lt;/p&gt;
&lt;p&gt;为了保证连接的有效性，可以检测到对方端非正常的断开，我们通常利用两种
    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
      <category term="TCP" scheme="http://www.sczyh30.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>TCP 拥塞控制</title>
    <link href="http://www.sczyh30.com/posts/Network/tcp-congestion-control/"/>
    <id>http://www.sczyh30.com/posts/Network/tcp-congestion-control/</id>
    <published>2016-01-27T16:00:00.000Z</published>
    <updated>2016-02-15T13:50:06.894Z</updated>
    
    <content type="html">&lt;p&gt;TCP拥塞控制这一块东西比较多~这里只总结重要的。&lt;/p&gt;
&lt;p&gt;TCP的拥塞控制主要依赖于&lt;strong&gt;拥塞窗口&lt;/strong&gt;(congestion window, cwnd)和&lt;strong&gt;慢启动阈值&lt;/strong&gt;(slow start threshold, ssthresh)。cwnd是发送端根据网络的拥塞程度所预设的一个窗口大小，而ssthresh则是慢启动窗口的阈值，cwnd超过此阈值则转变控制策略。&lt;/p&gt;
&lt;p&gt;TCP拥塞控制的主要算法有&lt;strong&gt;慢启动&lt;/strong&gt;(Slow Start)、&lt;strong&gt;拥塞避免&lt;/strong&gt;(Congestion Avoidance)、&lt;strong&gt;快速重传&lt;/strong&gt;(Fast Retransmit)、&lt;strong&gt;快速恢复&lt;/strong&gt;(Fast Recovery)等。&lt;/p&gt;
&lt;h2 id=&quot;Slow_Start&quot;&gt;Slow Start&lt;/h2&gt;&lt;p&gt;如果TCP连接一建立就向服务器大量发包，很容易导致拥塞。因此，新建立的连接不能一开始就大量发送数据包，而是应该根据网络状况，逐步地增加每次发送数据包的量，这就是慢启动。慢启动通常在新建立TCP连接或由于RTO而丢包时执行。&lt;/p&gt;
&lt;p&gt;具体来说，新建TCP连接时，cwnd需初始化为一个或几个最大发送报文段大小(send maximum segment size, SMSS)。具体规则（IW为初始窗口大小）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IW = 1*(SMSS) (if SMSS &amp;lt;= 2190 bytes)&lt;/p&gt;
&lt;p&gt;IW = 2*(SMSS) and not more than 2 segments (if SMSS &amp;gt; 2190 bytes)&lt;/p&gt;
&lt;p&gt;IW = 3*(SMSS) and not more than 3 segments (if 2190 ≥ SMSS &amp;gt; 1095 bytes)&lt;/p&gt;
&lt;p&gt;IW = 4*(SMSS) and not more than 4 segments (otherwise)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发送端按照cwnd大小发送数据，每当数据被确认时，cwnd就以2为倍数进行指数级增长，即 $cwnd&lt;em&gt;{n}=2*cwnd&lt;/em&gt;{n-1}$&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;开始 &lt;span class=&quot;comment&quot;&gt;---&amp;gt; cwnd = 1*SMSS  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经过一个RTT &lt;span class=&quot;comment&quot;&gt;---&amp;gt; cwnd = 2*SMSS  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经过两个RTT &lt;span class=&quot;comment&quot;&gt;---&amp;gt; cwnd = 2^2=4*SMSS  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;经过三个RTT &lt;span class=&quot;comment&quot;&gt;---&amp;gt; cwnd = 2^3=8*SMSS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果带宽为W，那么经过 $RTT log_{2}W$ 时间就可以占满带宽。&lt;/p&gt;
&lt;p&gt;显然，慢启动并不慢，cwnd会飞速增长。但是cwnd不能无限制地进行指数增长。当cwnd值超过慢启动阈值(ssthresh)时，慢启动过程结束，进入拥塞避免阶段。拥塞避免算法将在下面总结。&lt;/p&gt;
&lt;h2 id=&quot;Congestion_Avoidance&quot;&gt;Congestion Avoidance&lt;/h2&gt;&lt;p&gt;当cwnd值超过ssthresh值时，慢启动过程结束，进入拥塞避免阶段。在拥塞避免阶段，cwnd将不再呈指数增长，而是呈线性增长。一般来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收到一个ACK时，cwnd = cwnd + 1/cwnd&lt;/li&gt;
&lt;li&gt;当每过一个RTT时，cwnd = cwnd + 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样放缓了拥塞窗口的增长速率，避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。&lt;/p&gt;
&lt;h2 id=&quot;拥塞状态&quot;&gt;拥塞状态&lt;/h2&gt;&lt;p&gt;在慢启动阶段与拥塞避免阶段，只要判断发送方出现丢包，就会进行相应的控制。有两种情况：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; 等待RTO超时，重传数据包，此时TCP反应强烈：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将ssthresh降低为此时cwnd的一半&lt;/li&gt;
&lt;li&gt;将cwnd重新设为初始值(IW)&lt;/li&gt;
&lt;li&gt;重新进入慢启动阶段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原则：加法增大、乘法减小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; 连续收到3个duplicate ACK时，重传数据包，无须等待RTO。此情况即为下面的快速重传。&lt;/p&gt;
&lt;h2 id=&quot;Fast_Retransmit&quot;&gt;Fast Retransmit&lt;/h2&gt;&lt;p&gt;TCP在收到一个乱序的报文段时，会立即发送一个重复的ACK，并且此ACK不可被延迟。&lt;/p&gt;
&lt;p&gt;如果连续收到3个或3个以上重复的ACK，TCP会判定此报文段丢失，需要重新传递，而无需等待RTO。这就叫做快速重传。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：快速重传始于BSD 4.3 Tahoe，但Tahoe的TCP实现没有包含快速恢复阶段，快速重传后会退回至慢启动阶段。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Fast_Recovery&quot;&gt;Fast Recovery&lt;/h2&gt;&lt;p&gt;快速恢复是指快速重传后直接进入拥塞避免阶段而非慢启动阶段。总结一下快速恢复的步骤（以SMSS为单位）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;​当收到3个重复的ACK时，将ssthresh设置为cwnd的一半(ssthresh = cwnd/2)，然后将cwnd的值设为ssthresh加3(cwnd = ssthresh + 3)，然后快速重传丢失的报文段&lt;/li&gt;
&lt;li&gt;每次收到重复的ACK时，cwnd增加1(cwnd += 1)，并发送1个packet(如果允许的话)&lt;/li&gt;
&lt;li&gt;当收到新的ACK时，将cwnd设置为第一步中ssthresh的值(cwnd = ssthresh)，代表恢复过程结束&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;快速恢复后将进入拥塞避免阶段。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：快速恢复始于BSD 4.3 Reno。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;NewReno&quot;&gt;NewReno&lt;/h2&gt;&lt;p&gt;快速恢复存在的一个问题是它只能针对一个packet重传而不能针对多个packet，这样会RTO到吐。因此后来标准提出了NewReno作为Reno的补充。NewReno可以解决一个窗口内多个packet丢失的情况（Partial ACK），即NewReno算法需要处理完该窗口内所有packet的ACK后方可结束恢复状态。这是一种激进的优化，适合不支持SACK的情况。（通过recovery变量实现）&lt;/p&gt;
&lt;h2 id=&quot;SACK&quot;&gt;SACK&lt;/h2&gt;&lt;p&gt;SACK维持一个名为pipe的变量，代表流量的估计值。发包的时间由pipe决定。具体细节可见 &lt;a href=&quot;https://tools.ietf.org/html/rfc2018&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 2018&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;SACK可能会出现pipe计算不精确的情况，这样会使算法退化回Tahoe。Forward Acknowledgment (FACK)是对SACK的改进，它可以精确地计算pipe值。&lt;/p&gt;
&lt;h2 id=&quot;其它&quot;&gt;其它&lt;/h2&gt;&lt;p&gt;更多的拥塞控制算法见&lt;a href=&quot;http://en.wikipedia.org/wiki/TCP_congestion-avoidance_algorithm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP Congestion Avoidance Algorithm&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TCP拥塞控制这一块东西比较多~这里只总结重要的。&lt;/p&gt;
&lt;p&gt;TCP的拥塞控制主要依赖于&lt;strong&gt;拥塞窗口&lt;/strong&gt;(congestion window, cwnd)和&lt;strong&gt;慢启动阈值&lt;/strong&gt;(slow start threshold,
    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
      <category term="TCP" scheme="http://www.sczyh30.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>TCP Retransmission</title>
    <link href="http://www.sczyh30.com/posts/Network/tcp-retransmission/"/>
    <id>http://www.sczyh30.com/posts/Network/tcp-retransmission/</id>
    <published>2016-01-26T16:00:00.000Z</published>
    <updated>2016-02-15T13:53:24.408Z</updated>
    
    <content type="html">&lt;p&gt;TCP协议需保证所有的数据包都可以到达，因此必须要有重传机制。&lt;/p&gt;
&lt;p&gt;RTT: Round Trip Time&lt;/p&gt;
&lt;p&gt;RTO: Retransmission Timeout（重传超时时间）&lt;/p&gt;
&lt;h1 id=&quot;RTO_Algorithm&quot;&gt;RTO Algorithm&lt;/h1&gt;&lt;p&gt;如何计算RTO：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经典算法&lt;/li&gt;
&lt;li&gt;Karn’s Algorithm&lt;/li&gt;
&lt;li&gt;标准算法(Jacobson/Karels Algorithm, 目前Linux内核在用)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面两种算法用的都是“加权移动平均”，这种方法最大的毛病就是如果RTT有一个大的波动的话，很难被发现，因为被平滑掉了。&lt;/p&gt;
&lt;h1 id=&quot;重传机制&quot;&gt;重传机制&lt;/h1&gt;&lt;h2 id=&quot;超时重传&quot;&gt;超时重传&lt;/h2&gt;&lt;p&gt;通过重传计时器(retransmission timer)实现。&lt;/p&gt;
&lt;h2 id=&quot;快速重传&quot;&gt;快速重传&lt;/h2&gt;&lt;p&gt;TCP在收到一个乱序的报文段时，会立即发送一个重复的ACK，并且此ACK不可被延迟。&lt;/p&gt;
&lt;p&gt;如果连续收到3个或3个以上重复的ACK，TCP会判定此报文段丢失，需要重新传递，而无需等待RTO。这就叫做快速重传。&lt;/p&gt;
&lt;h2 id=&quot;SACK_&amp;amp;&amp;amp;_Duplicate_SACK&quot;&gt;SACK &amp;amp;&amp;amp; Duplicate SACK&lt;/h2&gt;&lt;p&gt;Selective Acknowledgment (SACK)是 TCP 的一项可选特性，可以提高某些网络中所有可用带宽的使用效率。普通 TCP（即未提供 SACK 特性）应答是严格累积的 — 对 N 的应答意味着字节 N 和所有之前的字节都已经收到。SACK 要解决的问题普通累积式应答的 “全有或全无” 性质。&lt;/p&gt;
&lt;p&gt;例如，即使包 2（假设从 0 到 9 的序列）是在传送过程中惟一丢失的包，接收方也只能对包 1 发出一个普通的 ACK，因为这是连续接收到的包中的最后一个。另一方面，SACK 接收方可以发出包 1 的 ACK 和包 3 到包 9 的 SACK 选项。这样，发送端就可以根据回传的SACK来知道哪些数据到了，哪些数据丢失了，进而可以优化Fast Retransmit。SACK需要两端的协议都支持，在目前的Linux Kernal中默认为开启状态。&lt;/p&gt;
&lt;h1 id=&quot;low-rate_DoS_attacks&quot;&gt;low-rate DoS attacks&lt;/h1&gt;&lt;p&gt;应用层应用：Slowloris (HTTP slow headers)&lt;/p&gt;
&lt;p&gt;防范：随机化RTO&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TCP协议需保证所有的数据包都可以到达，因此必须要有重传机制。&lt;/p&gt;
&lt;p&gt;RTT: Round Trip Time&lt;/p&gt;
&lt;p&gt;RTO: Retransmission Timeout（重传超时时间）&lt;/p&gt;
&lt;h1 id=&quot;RTO_Algorithm&quot;&gt;RTO Alg
    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
      <category term="TCP" scheme="http://www.sczyh30.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>TCP 流量控制</title>
    <link href="http://www.sczyh30.com/posts/Network/tcp-flow-control/"/>
    <id>http://www.sczyh30.com/posts/Network/tcp-flow-control/</id>
    <published>2016-01-26T16:00:00.000Z</published>
    <updated>2016-02-26T13:18:38.330Z</updated>
    
    <content type="html">&lt;p&gt;TCP 流量控制通过滑动窗口实现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TCP 流量控制通过滑动窗口实现。&lt;/p&gt;

    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
      <category term="TCP" scheme="http://www.sczyh30.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>TCP连接的建立和终止</title>
    <link href="http://www.sczyh30.com/posts/Network/tcp-connection/"/>
    <id>http://www.sczyh30.com/posts/Network/tcp-connection/</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2016-02-17T06:55:59.331Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章将总结TCP首部及连接的相关知识。&lt;/p&gt;
&lt;p&gt;TCP(Transmission Control Protocol)提供一种面向连接的、可靠的字节流服务。&lt;/p&gt;
&lt;p&gt;TCP连接是全双工的，即数据在两个方向上能够同时传递。&lt;/p&gt;
&lt;h1 id=&quot;TCP_Header&quot;&gt;TCP Header&lt;/h1&gt;&lt;p&gt;TCP报文由首部和数据组成，数据部分是可选的。TCP报文被封装在IP数据报中，结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/tcp-segment.PNG&quot; alt=&quot;IP Datagram&quot;&gt;&lt;/p&gt;
&lt;p&gt;TCP Header由固定部分(Basic)和选项部分(Options)组成，其中固定部分的大小为20 bytes。TCP Header最大为60 bytes。&lt;/p&gt;
&lt;p&gt;TCP Header的结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/tcp-header.PNG&quot; alt=&quot;TCP Header&quot;&gt;&lt;/p&gt;
&lt;p&gt;挑几个重要的说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequence Number(序号，Seq)：用来标识从TCP发送端到接收端发送的数据字节流，它表示这个报文段中的第一个数据字节，也用于解决packet乱序问题&lt;/li&gt;
&lt;li&gt;Acknowledgment Number(确认序号)：包含发送确认的一端所期望收到的下一个序列号&lt;/li&gt;
&lt;li&gt;CWR：阻塞窗口减小(Congestion Window Reduced)，通常是发送端减小了其发包速率&lt;/li&gt;
&lt;li&gt;ECE：ECN Echo&lt;/li&gt;
&lt;li&gt;URG：紧急指针(Urgent Pointer)有效&lt;/li&gt;
&lt;li&gt;PSH：该标志置位时，接收端不将该数据进行队列处理，而是尽可能快将数据转由应用处理&lt;/li&gt;
&lt;li&gt;ACK：确认序号(Acknowledgment Number)有效&lt;/li&gt;
&lt;li&gt;RST：重置连接（通常由于连接错误）&lt;/li&gt;
&lt;li&gt;SYN：同步序号(Sequence Number)，用来发起一个连接&lt;/li&gt;
&lt;li&gt;FIN：发送端完成发送任务&lt;/li&gt;
&lt;li&gt;Window Size：滑动窗口大小，用于流量控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;TCP连接的建立和终止&quot;&gt;TCP连接的建立和终止&lt;/h1&gt;&lt;h2 id=&quot;三次握手&quot;&gt;三次握手&lt;/h2&gt;&lt;p&gt;TCP three-way handshake（三次握手）的过程：&lt;/p&gt;
&lt;p&gt;(1)第一次握手(SYN)：客户端首先发送一个SYN包到服务器，初始序号Seq=ISN(client)=a。客户端进入&lt;strong&gt;SYN_SENT&lt;/strong&gt;状态。&lt;/p&gt;
&lt;p&gt;(2)第二次握手(SYN + ACK)：服务端收到客户端发来的SYN包后，需要确认客户端的SYN包，将确认序号ACK设为客户端的ISN加1(ACK=a+1)作为确认，同时发回包含服务器的初始序号Seq=ISN(server)=b，即SYN+ACK包。服务端进入&lt;strong&gt;SYN_RECV&lt;/strong&gt;状态。&lt;/p&gt;
&lt;p&gt;(3)第三次握手(ACK)：客户端收到服务端发来的SYN+ACK包后，将确认序号设为服务端的ISN加1作为确认，向服务端发送确认包(ACK=b+1)。此包发送完毕，客户端与服务端进入&lt;strong&gt;ESTABLISHED&lt;/strong&gt;状态，完成三次握手，建立连接。&lt;/p&gt;
&lt;p&gt;【思考】为什么需要三次握手而不是两次握手？&lt;/p&gt;
&lt;h2 id=&quot;四次挥手&quot;&gt;四次挥手&lt;/h2&gt;&lt;p&gt;由于TCP连接是全双工的，因此每个方向的连接必须单独地进行关闭，于是TCP连接的断开需要进行“四次挥手”（两端分别进行FIN+ACK和ACK两次挥手）。&lt;/p&gt;
&lt;p&gt;TCP连接断开的过程：&lt;/p&gt;
&lt;p&gt;(1)客户端发起请求，向服务端发送一个FIN(Seq=c, ACK=d)，用来关闭从客户端到服务端的传输。客户端的状态变为FIN_WAIT_1。此时客户端仍然可以接收数据。如果这之前发出的数据中存在没有ACK的，客户端仍然会重发这些数据。&lt;/p&gt;
&lt;p&gt;(2)服务端收到客户端的FIN包，然后向客户端发回一个ACK包(ACK=c+1)作为确认。&lt;/p&gt;
&lt;p&gt;(3)同时，服务端向客户端发送一个FIN(Seq=d, ACK=c+1)，用来关闭从服务端到客户端的传输。服务端的状态变为LAST_ACK。&lt;/p&gt;
&lt;p&gt;(4)客户端收到服务端的FIN包，然后向服务端发回一个ACK包(ACK=d+1)作为确认。四次挥手结束，连接断开(CLOSED)。&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSED状态&lt;/strong&gt;，原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TIME_WAIT确保有足够的时间让对端收到了ACK（如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL）&lt;/li&gt;
&lt;li&gt;有足够的时间让这个连接不会跟后面的连接混在一起（部分路由器会缓存数据包导致连接重用）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;用下面两幅图总结TCP连接的建立与终止：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/tcp-connection-overview.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/tcp-state.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后来一张TCP状态转换图，可以很好地概括整个TCP连接的建立和终止的过程及状态的变化。图来自 &lt;em&gt;TCP/IP Illustrated, Volume 1 : The Protocols(2nd Edition)&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/tcp-finite-state-machine.png&quot; alt=&quot;The TCP state transition diagram&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Reference:&lt;br&gt;[1] &lt;em&gt;TCP/IP Illustrated, Volume 1 : The Protocols(2nd Edition), Kevin.R.Fall&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章将总结TCP首部及连接的相关知识。&lt;/p&gt;
&lt;p&gt;TCP(Transmission Control Protocol)提供一种面向连接的、可靠的字节流服务。&lt;/p&gt;
&lt;p&gt;TCP连接是全双工的，即数据在两个方向上能够同时传递。&lt;/p&gt;
&lt;h1 id=&quot;TCP_Hea
    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
      <category term="TCP" scheme="http://www.sczyh30.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络相关知识总结</title>
    <link href="http://www.sczyh30.com/posts/Network/network-basis/"/>
    <id>http://www.sczyh30.com/posts/Network/network-basis/</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2016-02-15T13:41:16.261Z</updated>
    
    <content type="html">&lt;p&gt;本文将不断更新~&lt;/p&gt;
&lt;h1 id=&quot;网络模型&quot;&gt;网络模型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;OSI七层模型&lt;/strong&gt;：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层&lt;/p&gt;
&lt;p&gt;数据链路层对应的数据为Frame，网络层对应的数据为Packet，传输层对应的数据为Segment。&lt;/p&gt;
&lt;p&gt;网络数据首先会打到TCP的Segment中，然后TCP的Segment会打到IP的Packet中，然后再打到以太网Ethernet的Frame中，传到对端后，各个层解析自己的协议，然后把数据交给更高层的协议处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/osi-seven-layer.png&quot; alt=&quot;The standard seven-layer OSI model&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP/IP四层模型&lt;/strong&gt;：链路层、网络层(IP/ICMP/IGMP)、传输层(TCP/UDP)、应用层(如Telnet/HTTP/FTP)&lt;/p&gt;
&lt;h1 id=&quot;IPv4_and_IPv6_Headers&quot;&gt;IPv4 and IPv6 Headers&lt;/h1&gt;&lt;p&gt;IPv4 Datagram分为首部(Header)和数据两部分。IPv4 Header由固定部分(Basic)和选项部分(Options)组成，其中固定部分的大小为20 bytes。IPv4 Header最大为60 bytes。&lt;/p&gt;
&lt;p&gt;总结几个重要的field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ToS(Type of Service)：DS Field(Differentiated Services Field) + ECN(Explicit Congestion Notification, 显式拥塞通知)&lt;/li&gt;
&lt;li&gt;TTL(Time-to-Live)：数据报可以经过的最多路由数，指示了数据报的生存时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/ipv4-header.png&quot; alt=&quot;The IPv4 Datagram&quot;&gt;&lt;/p&gt;
&lt;p&gt;与IPv4 Header不同，IPv6 Header具有固定的大小(40 bytes)，并且没有选项部分。但是IPv6 Header可以有扩展首部(extension headers)，其作用与Options类似。Next Header字段用于指示extension headers。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/ipv6-header.png&quot; alt=&quot;The IPv6 Header&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;大端、小端与网络字节序&quot;&gt;大端、小端与网络字节序&lt;/h1&gt;&lt;p&gt;大小端是面向多字节定义的字节存储顺序。&lt;/p&gt;
&lt;p&gt;大端（Big-Endian）就是最高有效字节（MSB）在前，内存存储体现上，数据的高位更加靠近低地址。&lt;/p&gt;
&lt;p&gt;小端(Little-Endian)就是最低有效字节（LSB）在前，内存存储体现上，数据的低位更加靠近低地址。&lt;/p&gt;
&lt;p&gt;比如对字&lt;code&gt;0x01234567&lt;/code&gt;，最高有效字节为0x01，最低有效字节为0x67，那么其对应的大端存储顺序为&lt;code&gt;01 23 45 67&lt;/code&gt;，小端存储顺序为&lt;code&gt;67 45 23 01&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于IP数据报来说，RFC标准要求数据在网络中传输时都要求以大端字节序传输，因此网络字节序就对应Big-Endian字节序。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文将不断更新~&lt;/p&gt;
&lt;h1 id=&quot;网络模型&quot;&gt;网络模型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;OSI七层模型&lt;/strong&gt;：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层&lt;/p&gt;
&lt;p&gt;数据链路层对应的数据为Frame，网络层对应的数据为Packet，传输层
    
    </summary>
    
      <category term="Network" scheme="http://www.sczyh30.com/categories/Network/"/>
    
    
      <category term="Network" scheme="http://www.sczyh30.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>深入探究JVM | klass-oop对象模型研究</title>
    <link href="http://www.sczyh30.com/posts/Java/jvm-klass-oop/"/>
    <id>http://www.sczyh30.com/posts/Java/jvm-klass-oop/</id>
    <published>2016-01-05T16:00:00.000Z</published>
    <updated>2016-03-17T14:32:36.314Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;之前理解有些偏差，因此最近重新写了这篇文章。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近对JVM兴趣大增（其实是想回归C艹的怀抱了）~&lt;br&gt;当我们在写Java代码的时候，我们会面对着无数个接口，类，对象和方法。但我们有木有想过，Java中的这些对象、类和方法，在HotSpot JVM中的结构又是怎么样呢？HotSpot JVM底层都是C++实现的，那么Java的对象模型与C++对象模型之间又有什么关系呢？今天就来分析一下HotSpot JVM中的对象模型：oop-klass model，它们的源码位于openjdk-8/openjdk/hotspot/src/share/vm/oops文件夹内。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：本文对应的OpenJDK版本为openjdk-8u76-b02。对于不同的版本(openjdk-7, openjdk-8, openjdk-9)，其对应的HotSpot JVM的对象模型有些许差别（7和8的差别比较大）&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;oop-klass_model概述&quot;&gt;oop-klass model概述&lt;/h1&gt;&lt;p&gt;HotSpot JVM并没有根据Java实例对象直接通过虚拟机映射到新建的C++对象，而是设计了一个oop-klass model。&lt;/p&gt;
&lt;p&gt;当时第一次看到oop，我的第一反应就是Object-oriented programming，其实这里的oop指的是Ordinary Object Pointer（普通对象指针），它用来表示对象的实例信息，看起来像个指针实际上是藏在指针里的对象。而klass则是Java中的&lt;code&gt;java.lang.Class&lt;/code&gt;类在JVM Native层里的对等体，用来描述Java类，包含&lt;strong&gt;元数据和方法信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么为何要设计这样一个一分为二的对象模型呢？这是因为HotSopt JVM的设计者不想让每个对象中都含有一个vtable（虚函数表），所以就把对象模型拆成klass和oop，其中oop中不含有任何虚函数，而klass就含有虚函数表，可以进行method dispatch。这个模型其实是参照的&lt;strong&gt;Strongtalk VM&lt;/strong&gt;底层的对象模型。&lt;/p&gt;
&lt;h1 id=&quot;体系总览&quot;&gt;体系总览&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;oopsHierarchy.hpp&lt;/code&gt;里定义了oop和klass各自的体系。&lt;br&gt;这是oop的体系：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; oopDesc*                            oop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   instanceOopDesc*            instanceOop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   arrayOopDesc*                    arrayOop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;     objArrayOopDesc*            objArrayOop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;     typeArrayOopDesc*            typeArrayOop;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意由于Java 8引入了Metaspace，OpenJDK 1.8里对象模型的实现与1.7有很大的不同。原先存于PermGen的数据都移至Metaspace，因此它们的C++类型都继承于&lt;code&gt;MetaspaceObj&lt;/code&gt;类(定义见&lt;code&gt;vm/memory/allocation.hpp&lt;/code&gt;)，表示元空间的数据。&lt;/p&gt;
&lt;p&gt;这是元数据的体系：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The metadata hierarchy is separate from the oop hierarchy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      class MetaspaceObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   ConstMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   ConstantPoolCache;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   MethodData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      class Metadata&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   Method;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   ConstantPool;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      class CHeapObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   CompiledICHolder;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是klass的体系：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The klass hierarchy is separate from the oop hierarchy.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Klass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   InstanceKlass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;     InstanceMirrorKlass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;     InstanceClassLoaderKlass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;     InstanceRefKlass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   ArrayKlass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;     ObjArrayKlass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;     TypeArrayKlass;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意klass代表元数据，继承自&lt;code&gt;Metadata&lt;/code&gt;类，因此像&lt;code&gt;Method&lt;/code&gt;、&lt;code&gt;ConstantPool&lt;/code&gt;都会以成员变量（或指针）的形式存在于klass体系中。&lt;/p&gt;
&lt;p&gt;以下是JDK 1.7中的类在JDK 1.8中的存在形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;klassOop&lt;/code&gt;-&amp;gt;&lt;code&gt;Klass*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;klassKlass&lt;/code&gt;不再需要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;methodOop&lt;/code&gt;-&amp;gt;&lt;code&gt;Method*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;methodDataOop&lt;/code&gt;-&amp;gt; &lt;code&gt;MethodData*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constMethodOop&lt;/code&gt; -&amp;gt; &lt;code&gt;ConstMethod*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constantPoolOop&lt;/code&gt; -&amp;gt; &lt;code&gt;ConstantPool*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constantPoolCacheOop&lt;/code&gt; -&amp;gt; &lt;code&gt;ConstantPoolCache*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;klass&quot;&gt;klass&lt;/h1&gt;&lt;p&gt;一个Klass对象代表一个类的元数据（相当于&lt;code&gt;java.lang.Class&lt;/code&gt;对象）。它提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;language level class object (method dictionary etc.)&lt;/li&gt;
&lt;li&gt;provide vm dispatch behavior for the object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有的函数都被整合到一个C++类中。&lt;/p&gt;
&lt;p&gt;Klass对象的继承关系：&lt;code&gt;xxxKlass &amp;lt;:&amp;lt; Klass &amp;lt;:&amp;lt; Metadata &amp;lt;:&amp;lt; MetaspaceObj&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;klass对象的布局如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Klass layout:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [C++ vtbl ptr  ] (contained in Metadata)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [layout_helper ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [super_check_offset   ] for fast subtype checks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [name          ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [secondary_super_cache] for fast subtype checks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [secondary_supers     ] array of 2ndary supertypes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [primary_supers 0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [primary_supers 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [primary_supers 2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [primary_supers 7]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [java_mirror   ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [super         ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [subklass      ] first subclass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [next_sibling  ] link to chain additional subklasses&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [next_link     ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [class_loader_data]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [modifier_flags]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [access_flags  ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [last_biased_lock_bulk_revocation_time] (64 bits)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [prototype_header]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [biased_lock_revocation_count]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [_modified_oops]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [_accumulated_modified_oops]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [trace_id]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;oop&quot;&gt;oop&lt;/h1&gt;&lt;p&gt;&lt;code&gt;oop&lt;/code&gt;类型其实是&lt;code&gt;oopDesc*&lt;/code&gt;。在Java程序运行的过程中，每创建一个新的对象，在JVM内部就会相应地创建一个对应类型的oop对象。各种oop类的共同基类为&lt;code&gt;oopDesc&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;JVM内部，一个Java对象在内存中的布局可以连续分成两部分：&lt;code&gt;instanceOopDesc&lt;/code&gt;和实例数据。&lt;code&gt;instanceOopDesc&lt;/code&gt;和&lt;code&gt;arrayOopDesc&lt;/code&gt;又称为对象头。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;instanceOopDesc&lt;/code&gt;对象头包含两部分信息：&lt;strong&gt;Mark Word&lt;/strong&gt; 和 &lt;strong&gt;元数据指针&lt;/strong&gt;(&lt;code&gt;Klass*&lt;/code&gt;)：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; markOop  _mark;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; _metadata &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Klass*      _klass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    narrowKlass _compressed_klass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; _metadata;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;分别来看一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mark Word&lt;/strong&gt;：instanceOopDesc中的&lt;code&gt;_mark&lt;/code&gt;成员。它用于存储对象的运行时记录信息，如哈希值、GC分代年龄(Age)、锁状态标志（偏向锁、轻量级锁、重量级锁）、线程持有的锁、偏向线程ID、偏向时间戳等。Mark Word允许压缩&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元数据指针&lt;/strong&gt;：instanceOopDesc中的&lt;code&gt;_metadata&lt;/code&gt;成员，它是联合体，可以表示未压缩的Klass指针(&lt;code&gt;_klass&lt;/code&gt;)和压缩的Klass指针。对应的klass指针指向一个存储类的元数据的Klass对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们来分析一下，执行&lt;code&gt;new A()&lt;/code&gt;的时候，JVM Native里发生了什么。首先，如果这个类没有被加载过，JVM就会进行类的加载，并在JVM内部创建一个&lt;strong&gt;instanceKlass&lt;/strong&gt;对象表示这个类的运行时元数据（相当于Java层的&lt;code&gt;Class&lt;/code&gt;对象。到初始化的时候（执行&lt;code&gt;invokespecial A::&amp;lt;init&amp;gt;&lt;/code&gt;），JVM就会创建一个&lt;br&gt;&lt;strong&gt;instanceOopDesc&lt;/strong&gt;对象表示这个对象的实例，然后进行Mark Word的填充，将元数据指针指向Klass对象，并填充实例变量。&lt;/p&gt;
&lt;p&gt;根据对JVM的理解，我们可以想到，元数据——&lt;strong&gt;instanceKlass&lt;/strong&gt;对象会存在元空间（方法区），而对象实例——&lt;strong&gt;instanceOopDesc&lt;/strong&gt;会存在Java堆。Java虚拟机栈中会存有这个对象实例的引用。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;未完待续。。。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;参考文档&quot;&gt;参考文档&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/groups/hotspot/docs/StorageManagement.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HotSpot Docs - Storage Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/archive/p/strongtalk/wikis/VMTypesForSmalltalkObjects.wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Strongtalk - VMTypesForSmalltalkObjects.wiki（讲述了”oop”的历史）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;之前理解有些偏差，因此最近重新写了这篇文章。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近对JVM兴趣大增（其实是想回归C艹的怀抱了）~&lt;br&gt;当我们在写Java代码的时候，我们会面对着无数个接口，类，对象和方法。但我们有木有想过，Java中的这些对象、类和方法，在HotSpot 
    
    </summary>
    
      <category term="Java" scheme="http://www.sczyh30.com/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://www.sczyh30.com/tags/JVM/"/>
    
      <category term="Java" scheme="http://www.sczyh30.com/tags/Java/"/>
    
      <category term="Klass-oop" scheme="http://www.sczyh30.com/tags/Klass-oop/"/>
    
      <category term="Object Model" scheme="http://www.sczyh30.com/tags/Object-Model/"/>
    
  </entry>
  
  <entry>
    <title>Inside The C++ Object Model Summary III</title>
    <link href="http://www.sczyh30.com/posts/C-C/inside-cpp-object-model-summary-3/"/>
    <id>http://www.sczyh30.com/posts/C-C/inside-cpp-object-model-summary-3/</id>
    <published>2015-12-27T16:00:00.000Z</published>
    <updated>2016-03-23T07:11:37.824Z</updated>
    
    <content type="html">&lt;p&gt;这篇将总结C++的函数语义学相关的内容( &lt;em&gt;Inside The C++ Object Model, Chapter 4&lt;/em&gt; )。&lt;/p&gt;
&lt;h1 id=&quot;Nonstatic_Member_Function&quot;&gt;Nonstatic Member Function&lt;/h1&gt;&lt;p&gt;非静态成员函数和普通函数的等价形式：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Strategy* sp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; Strategy::compute() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一般来说，非静态成员函数在经过编译时会被转化为非成员函数，转化步骤如下：&lt;br&gt;（1）改写函数原型,参数变为&lt;code&gt;this&lt;/code&gt;指针。&lt;br&gt;（2）将所有成员变量的存取操作都转化为经this指针的操作。&lt;br&gt;（3）将此函数重写为一个外部函数并导出，名称进行&lt;strong&gt;Name Mangling&lt;/strong&gt;。&lt;br&gt;最后函数的调用形式也随之改变：&lt;code&gt;obj.magnitude()&lt;/code&gt;转化为&lt;code&gt;magnitude_7Point3dFv(&amp;amp;obj)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;Deep_in_Virtual_Function&quot;&gt;Deep in Virtual Function&lt;/h1&gt;&lt;h2 id=&quot;单继承下的虚函数&quot;&gt;单继承下的虚函数&lt;/h2&gt;&lt;p&gt;对于普通的类，每个类只含一个虚函数表(vtbl)，其中虚函数表记录了基本信息(type_info)及各函数的地址。&lt;br&gt;每个对象在编译时都会被安插虚函数指针(vptr)指向虚函数表。&lt;br&gt;对于以下类：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Scala &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Scala&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; type)&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(type)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~Scala() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// pure virtual function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;FUCK 0&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Scalaz : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Scala &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Scalaz&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; type)&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s2)&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Scala&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(type)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~Scalaz() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Scalaz&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;FUCK =&amp;gt; 1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的Scala类和Scalaz类的模型如下所示：&lt;br&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/vtable-isppom.PNG&quot; alt=&quot;Object Model&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意：不同的C++编译器对vtable的实现不同，vtbl的初始偏移量可能是0，也可能是-8之类的。如果编译器开启了RTTI，则vtbl里会包含type_info。&lt;/p&gt;
&lt;p&gt;现在如果调用&lt;code&gt;ptr-&amp;gt;g()&lt;/code&gt;，我们并不知道ptr所指对象的具体类型，但是有两点很清楚：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无论ptr对应哪种对象，我们总是可以通过ptr找到对应对象的vtable&lt;/li&gt;
&lt;li&gt;无论ptr对应哪种对象，g函数的地址总是在&lt;strong&gt;slot 3&lt;/strong&gt;位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此此调用可以转化为：&lt;code&gt;(*ptr-&amp;gt;vptr[3])(ptr)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用gdb查看运行时的vtbl(命令：&lt;code&gt;i vtbl 对象名&lt;/code&gt;)：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vtable &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Scala&#39;&lt;/span&gt; @ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x400d70 (subobject @ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x603010):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x400bf0 &amp;lt;Scalaz::~&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Scalaz&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x400c2a &amp;lt;Scalaz::~&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Scalaz&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x400c50 &amp;lt;Scalaz::&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x400b7a &amp;lt;Scala::&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x400c7a &amp;lt;Scalaz::&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;纯虚函数为什么等于0&quot;&gt;纯虚函数为什么等于0&lt;/h2&gt;&lt;p&gt;在C++标准中，通过使虚函数=0来定义纯虚函数，其含义是在vtbl对应的地方填上0。关于为什么设计纯虚函数，以及纯虚函数为什么为0， &lt;em&gt;The Design and Evolution of C++&lt;/em&gt; 中的描述是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The curious =0 syntax was chosen over the obvious alternative of introducing a new keyword pure or abstract because at the time I saw no chance of getting a new keyword accepted. Had I suggested pure, Release 2.0 would have shipped without abstract classes. Given a choice between a nicer syntax and abstract classes, I chose abstract classes. Rather than risking delay and incurring the certain fights over pure, I used the tradition C and C++ convention of using 0 to represent “not there.” The =0 syntax fits with my view that a function body is the initializer for a function also with the (simplistic, but usually adequate) view of the set of virtual functions being implemented as a vector of function pointers.&lt;/em&gt;&lt;br&gt;&lt;strong&gt;—— The Design and Evolution of C++&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;另外一点&lt;/strong&gt;：在MSVC中，NULL = 0；而在GCC的实现中，&lt;code&gt;NULL&lt;/code&gt;的内部实现是&lt;code&gt;__null&lt;/code&gt;而不是&lt;strong&gt;0&lt;/strong&gt;。因此在定义纯虚函数的时候不要用NULL代替0，也不能用C++11的&lt;code&gt;nullptr&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;普通多继承下的虚函数&quot;&gt;普通多继承下的虚函数&lt;/h2&gt;&lt;p&gt;假设派生类直接继承了n个类，则派生类中就会有n个vptr。多继承下的派生类拥有一个主要的vptr和 n-1 个次要的vptr。&lt;br&gt;多重继承最左端的基类，在派生类中作为主要实体，其对应的vtbl为主要的vtbl。&lt;br&gt;假设现在有下面的类：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Base1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~Base1() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; Base1 *clone() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; b1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Base2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~Base2() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; Base2 *clone() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; b2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Derived : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Base1, &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Base2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~Derived() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; Derived *clone() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的继承关系中，Base1就作为主要实体。&lt;br&gt;例如，有以下调用：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Base1 *b1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Derived();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Base2 *b2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Derived();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; b1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; b2;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个指针所指对象对应的vtbl是不同的，里面涉及多继承指针转换的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b1不需要调整this指针（最左边的类）&lt;/li&gt;
&lt;li&gt;b2需要调整this指针&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对b2来说，构造函数必须调整对象地址，使其指向Base2 subobject（当然析构函数也是）：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Derived *&lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;emp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Derived();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Base2 *b2 = &lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;emp ? &lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;emp + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(Base1) : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;万恶的含虚基类的虚函数&quot;&gt;万恶的含虚基类的虚函数&lt;/h2&gt;&lt;p&gt;Pending…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇将总结C++的函数语义学相关的内容( &lt;em&gt;Inside The C++ Object Model, Chapter 4&lt;/em&gt; )。&lt;/p&gt;
&lt;h1 id=&quot;Nonstatic_Member_Function&quot;&gt;Nonstatic Member Function&lt;
    
    </summary>
    
      <category term="C/C++" scheme="http://www.sczyh30.com/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://www.sczyh30.com/tags/C/"/>
    
      <category term="Object Model" scheme="http://www.sczyh30.com/tags/Object-Model/"/>
    
      <category term="Summary" scheme="http://www.sczyh30.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>C++ 11 STL | functional标准库</title>
    <link href="http://www.sczyh30.com/posts/C-C/cpp-stl-functional/"/>
    <id>http://www.sczyh30.com/posts/C-C/cpp-stl-functional/</id>
    <published>2015-12-19T16:00:00.000Z</published>
    <updated>2016-03-23T07:25:33.862Z</updated>
    
    <content type="html">&lt;p&gt;最近正好用到了这个，就顺便总结下吧。&lt;br&gt;C++ 11引入了函数对象标准库&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;;，里面包含各种内建的函数对象以及相关的操作函数，非常方便。这里总结一下&lt;code&gt;std::function&lt;/code&gt;和&lt;code&gt;std::bind&lt;/code&gt;的相关用法。&lt;/p&gt;
&lt;h1 id=&quot;Callable_type&quot;&gt;Callable type&lt;/h1&gt;&lt;p&gt;Callable type指可以像调用函数一样被调用的对象或函数，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;std::function&lt;/li&gt;
&lt;li&gt;std::bind&lt;/li&gt;
&lt;li&gt;std::result_of&lt;/li&gt;
&lt;li&gt;std::thread::thread&lt;/li&gt;
&lt;li&gt;std::call_once&lt;/li&gt;
&lt;li&gt;std::async&lt;/li&gt;
&lt;li&gt;std::packaged_task&lt;/li&gt;
&lt;li&gt;std::reference_wrapper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据C++ 17 Standard，所有Callable type都可以通过&lt;code&gt;std::invoke&lt;/code&gt;方法进行&lt;a href=&quot;http://en.cppreference.com/w/cpp/utility/functional/invoke&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;显式调用&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;std::function&quot;&gt;std::function&lt;/h1&gt;&lt;p&gt;&lt;code&gt;std::function&lt;/code&gt;类模板是一种通用的函数包装器，它可以容纳所有可以调用的对象（&lt;a href=&quot;http://en.cppreference.com/w/cpp/concept/Callable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Callable&lt;/a&gt;），包括&lt;strong&gt;函数&lt;/strong&gt;、&lt;strong&gt;函数指针&lt;/strong&gt;、&lt;strong&gt;Lambda表达式&lt;/strong&gt;、&lt;strong&gt;bind表达式&lt;/strong&gt;、成员函数及成员变量或者其他函数对象。通过std::function可以储存、拷贝或调用Callable对象。它的模板参数如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; R, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;... Args &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; function&amp;lt;R(Args...)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用时，模板参数与要存储的函数参数一致即可，下面是一些例子：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &amp;lt;functional&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; y, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; z)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y + z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_num&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; num &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Dog &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; id + i &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; PrintString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp;&amp;amp; s)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// common function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::function&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;gt; func_display_num = print_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func_display_num(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// common function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::function&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)&amp;gt; func_display = f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; func_display(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.7&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// lambda expression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::function&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;*)&amp;gt; lbd_dsp_str = [](&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *s) &amp;#123;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&amp;#125;;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lbd_dsp_str(&lt;span class=&quot;string&quot;&gt;&quot;Scala&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// bind expression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; func_num_bind = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::bind(&amp;amp;f, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::placeholders::_1, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; func_num_bind(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// function object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::function&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp;&amp;amp;)&amp;gt; func_obj_print = PrintString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func_obj_print(&lt;span class=&quot;string&quot;&gt;&quot;C++ 17 Nice!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// member function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Dog &lt;span class=&quot;title&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(2424)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::function&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Dog&amp;amp;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;gt; func_mem_display_num = &amp;amp;Dog::print_add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func_mem_display_num(dog, &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意声明时可用&lt;code&gt;auto&lt;/code&gt;进行自动类型推导，这样可以节约时间，不过这样会牺牲代码的可读性，因此需要根据情况合理使用auto。&lt;/p&gt;
&lt;h1 id=&quot;std::bind&quot;&gt;std::bind&lt;/h1&gt;&lt;p&gt;顾名思义，&lt;code&gt;std::bind&lt;/code&gt;函数用来绑定函数的某些参数并生成一个新的function对象。&lt;br&gt;&lt;code&gt;bind&lt;/code&gt;用于实现偏函数（Partial Function），相当于实现了函数式编程中的&lt;strong&gt;Currying&lt;/strong&gt;（柯里化）。&lt;br&gt;比如有一函数的定义为：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func_muti&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp;&amp;amp; b, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* c, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; d, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; d &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; e &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在将此函数的一些参数绑定上值，其余部分用占位符对象（std::placeholders）表示。占位符是有序号的，代表调用此函数对象时参数在参数列表中的位置。比如：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::bind(&amp;amp;func_muti, &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::placeholders::_1, &lt;span class=&quot;string&quot;&gt;&quot;Haha&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::placeholders::_2, &lt;span class=&quot;string&quot;&gt;&#39;P&#39;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;string&quot;&gt;&quot;Hehe&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;24.24&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用这个函数对象相当于调用以下函数：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp;&amp;amp; b, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;24&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Haha&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; d &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&#39;P&#39;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkkgd.com1.z0.glb.clouddn.com/005tNQILjw1exy3nzavc3j30c8083gm1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近正好用到了这个，就顺便总结下吧。&lt;br&gt;C++ 11引入了函数对象标准库&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;;，里面包含各种内建的函数对象以及相关的操作函数，非常方便。这里总结一下&lt;code&gt;std::function&lt;/code&gt;和&lt;code
    
    </summary>
    
      <category term="C/C++" scheme="http://www.sczyh30.com/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://www.sczyh30.com/tags/C/"/>
    
      <category term="STL" scheme="http://www.sczyh30.com/tags/STL/"/>
    
      <category term="functional" scheme="http://www.sczyh30.com/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>C++ 11 Move Sementics/Perfect Forwarding</title>
    <link href="http://www.sczyh30.com/posts/C-C/cpp-move-semantic/"/>
    <id>http://www.sczyh30.com/posts/C-C/cpp-move-semantic/</id>
    <published>2015-12-02T16:00:00.000Z</published>
    <updated>2016-03-23T07:24:51.327Z</updated>
    
    <content type="html">&lt;h1 id=&quot;lvalue_&amp;amp;&amp;amp;_rvalue&quot;&gt;lvalue &amp;amp;&amp;amp; rvalue&lt;/h1&gt;&lt;p&gt;表达式可以分为lvalue（左值）和rvalue（右值）两种。&lt;br&gt;左值与右值的区别是左值具名，&lt;strong&gt;可以取址&lt;/strong&gt;并访问；而右值不具名，通常是临时的变量，不可取址，仅在当前作用域有效。&lt;br&gt;对于函数及运算符，如果返回类型是左值引用类型(A&amp;amp;)，那么返回值是左值；若返回类型是原对象类型(A)，那么返回值就是右值&lt;br&gt;举一些例子来说明：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; str1 = &lt;span class=&quot;string&quot;&gt;&quot;nice&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; str2 = &lt;span class=&quot;string&quot;&gt;&quot;Scala&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; vec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vec.push_back(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; m = &lt;span class=&quot;number&quot;&gt;666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Value category&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;rvalue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;lvalue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a+b&lt;/td&gt;
&lt;td&gt;rvalue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;a&lt;/td&gt;
&lt;td&gt;rvalue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*p&lt;/td&gt;
&lt;td&gt;lvalue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++i&lt;/td&gt;
&lt;td&gt;lvalue(前缀自增运算符直接在原变量上自增)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i++&lt;/td&gt;
&lt;td&gt;rvalue(后缀自增运算符先拷贝一份变量，自增后再重新赋值给原变量)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std::string(“oye”)&lt;/td&gt;
&lt;td&gt;rvalue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str1+str2&lt;/td&gt;
&lt;td&gt;rvalue(重载的‘+’运算符返回的是一个临时的std::string对象而不是引用)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vec[0]&lt;/td&gt;
&lt;td&gt;lvalue(重载的[]运算符返回类型为&lt;strong&gt;int&amp;amp;&lt;/strong&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;lvalue(引用了一个右值，但本身是左值)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更详细的信息见&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_category&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Value categories&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Move_semantic&quot;&gt;Move semantic&lt;/h1&gt;&lt;p&gt;右值引用(移动语义)的意义：进行数据复制的时候，将动态申请的内存空间的所有权直接转让出去，不用进行大量的数据移动，既节省空间又提高效率。&lt;/p&gt;
&lt;p&gt;被移动语义的数据交出了所有权，为了不出现析构两次同一数据区，要将交出所有权的数据的指向动态申请内存去的指针赋值为nullptr，即空指针。对空指针执行delete[]是合法的。&lt;/p&gt;
&lt;p&gt;拷贝构造函数与移动构造函数的区别：&lt;br&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说，移动构造函数可以直接利用右值的内存空间而不用再另开辟空间进行数据的拷贝。&lt;/p&gt;
&lt;p&gt;将左值转化为右值可以用&lt;code&gt;std::move&lt;/code&gt;，比如：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp;&amp;amp; a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(s); &lt;span class=&quot;comment&quot;&gt;// invoke f(&amp;amp;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::move(s));&lt;span class=&quot;comment&quot;&gt;// invoke f(&amp;amp;&amp;amp;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Perfect_forwarding&quot;&gt;Perfect forwarding&lt;/h1&gt;&lt;p&gt;有的时候，我们需要将一个函数某一组参数原封不动地传递给另一个函数。这里不仅需要参数的值不变，而且需要参数的类型属性（左值/右值，const/volatile属性)保持不变，这叫做&lt;strong&gt;Perfect Forwarding&lt;/strong&gt;（参数的精确传递）&lt;br&gt;从C++ 11开始，Perfect Forwarding可以通过&lt;code&gt;std::forward&lt;/code&gt;函数实现，其原型为：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// C++ 14 definition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; T &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; T&amp;amp;&amp;amp; forward( &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::remove_reference&amp;lt;T&amp;gt;::type&amp;amp; t );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; T &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; T&amp;amp;&amp;amp; forward( &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::remove_reference&amp;lt;T&amp;gt;::type&amp;amp;&amp;amp; t );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用示例：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;&amp;amp; n) &amp;#123; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;rvalue constructor -&amp;gt; n=&quot;&lt;/span&gt; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; n) &amp;#123; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;lvalue constructor -&amp;gt; n=&quot;&lt;/span&gt; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::endl;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; T, &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; U&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique_ptr&amp;lt;T&amp;gt; make_unique1(U&amp;amp;&amp;amp; u) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique_ptr&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; T(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::forward&amp;lt;U&amp;gt;(u)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p1 = make_unique1&amp;lt;A&amp;gt;(&lt;span class=&quot;number&quot;&gt;666&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// rvalue forwarding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p2 = make_unique1&amp;lt;A&amp;gt;(i); &lt;span class=&quot;comment&quot;&gt;// lvalue forwarding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p3 = make_unique1&amp;lt;A&amp;gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::move(i)); &lt;span class=&quot;comment&quot;&gt;// rvalue forwarding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;程序运行结果：&lt;br&gt;&lt;figure class=&quot;highlight delphi&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rvalue &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt; -&amp;gt; &lt;span class=&quot;title&quot;&gt;n&lt;/span&gt;=666&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;lvalue&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt; -&amp;gt; &lt;span class=&quot;title&quot;&gt;n&lt;/span&gt;=24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;rvalue&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt; -&amp;gt; &lt;span class=&quot;title&quot;&gt;n&lt;/span&gt;=24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，参数在传递时都保留了参数原本的属性。&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;原理&lt;/h1&gt;&lt;p&gt;先放上源码，后面再分析。。&lt;/p&gt;
&lt;p&gt;源码(gcc 4.9.2)：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  @brief  Forward an lvalue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  @return The parameter cast to the specified type.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  This function is used to implement &quot;perfect forwarding&quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Tp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; _Tp&amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward(&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::remove_reference&amp;lt;_Tp&amp;gt;::type&amp;amp; &lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;_Tp&amp;amp;&amp;amp;&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  @brief  Forward an rvalue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  @return The parameter cast to the specified type.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  This function is used to implement &quot;perfect forwarding&quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Tp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; _Tp&amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward(&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::remove_reference&amp;lt;_Tp&amp;gt;::type&amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;static_assert&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::is_lvalue_reference&amp;lt;_Tp&amp;gt;::value, &lt;span class=&quot;string&quot;&gt;&quot;template argument&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &lt;span class=&quot;string&quot;&gt;&quot; substituting _Tp is an lvalue reference type&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;_Tp&amp;amp;&amp;amp;&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  @brief  Convert a value to an rvalue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  @param  __t  A thing of arbitrary type.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *  @return The parameter cast to an rvalue-reference to allow moving it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Tp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::remove_reference&amp;lt;_Tp&amp;gt;::type&amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    move(_Tp&amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::remove_reference&amp;lt;_Tp&amp;gt;::type&amp;amp;&amp;amp;&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;__t&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// remove_reference&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Tp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; remove_reference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Tp   type; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Tp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; remove_reference&amp;lt;_Tp&amp;amp;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Tp   type; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Tp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; remove_reference&amp;lt;_Tp&amp;amp;&amp;amp;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Tp   type; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lvalue_&amp;amp;&amp;amp;_rvalue&quot;&gt;lvalue &amp;amp;&amp;amp; rvalue&lt;/h1&gt;&lt;p&gt;表达式可以分为lvalue（左值）和rvalue（右值）两种。&lt;br&gt;左值与右值的区别是左值具名，&lt;strong&gt;可以取址&lt;/strong&gt;并访问；
    
    </summary>
    
      <category term="C/C++" scheme="http://www.sczyh30.com/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://www.sczyh30.com/tags/C/"/>
    
      <category term="C++ 11" scheme="http://www.sczyh30.com/tags/C-11/"/>
    
  </entry>
  
</feed>
